description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: GsonBuilder
"Method: setVersion
Description: /**
* Configures Gson to enable versioning support.
*
* @param ignoreVersionsAfter any field or type marked with a version higher than this value
* are ignored during serialization or deserialization.
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
*/"
"Method: excludeFieldsWithModifiers
Description: /**
* Configures Gson to excludes all class fields that have the specified modifiers. By default,
* Gson will exclude all fields marked transient or static. This method will override that
* behavior.
*
* @param modifiers the field modifiers. You must use the modifiers specified in the
* {@link java.lang.reflect.Modifier} class. For example,
* {@link java.lang.reflect.Modifier#TRANSIENT},
* {@link java.lang.reflect.Modifier#STATIC}.
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
*/"
"Method: generateNonExecutableJson
Description: /**
* Makes the output JSON non-executable in Javascript by prefixing the generated JSON with some
* special text. This prevents attacks from third-party sites through script sourcing. See
"* <a href="http://code.google.com/p/google-gson/issues/detail?id=42">Gson Issue 42</a>"
* for details.
*
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.3
*/"
"Method: excludeFieldsWithoutExposeAnnotation
Description: /**
* Configures Gson to exclude all fields from consideration for serialization or deserialization
* that do not have the {@link com.google.gson.annotations.Expose} annotation.
*
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
*/"
"Method: serializeNulls
Description: /**
* Configure Gson to serialize null fields. By default, Gson omits all fields that are null
* during serialization.
*
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.2
*/"
"Method: disableInnerWrite a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
ClassSerialization
Description: /**
* Configures Gson to exclude inner classes during serialization.
*
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.3
*/"
"Method: setLongSerializationPolicy
Description: /**
* Configures Gson to apply a specific serialization policy for {@code Long} and {@code long}
* objects.
*
* @param serializationPolicy the particular policy to use for serializing longs.
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.3
*/"
"Method: setFieldNamingPolicy
Description: /**
* Configures Gson to apply a specific naming policy to an object's field during serialization
* and deserialization.
*
* @param namingConvention the JSON field naming convention to use for serialization and
* deserialization.
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
*/"
"Method: setFieldNamingStrategy
Description: /**
* Configures Gson to apply a specific naming policy strategy to an object's field during
* serialization and deserialization.
*
* @param fieldNamingStrategy the actual naming strategy to apply to the fields
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.3
*/"
"Method: setExclusionStrategies
Description: /**
* Configures Gson to apply a set of exclusion strategies during both serialization and
* deserialization. Each of the {@code strategies} will be applied as a disjunction rule.
* This means that if one of the {@code strategies} suggests that a field (or class) should be
* skipped then that field (or object) is skipped during serializaiton/deserialization.
*
* @param strategies the set of strategy object to apply during object (de)serialization.
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.4
*/"
"Method: setPrettyPrinting
Description: /**
* Configures Gson to output Json that fits in a page for pretty printing. This option only
* affects Json serialization.
*
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
*/"
"Method: disableHtmlEscaping
Description: /**
* By default, Gson escapes HTML characters such as &lt; &gt; etc. Use this option to configure
* Gson to pass-through HTML characters as is.
*
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.3
*/"
"Method: setDateFormat
Description: /**
* Configures Gson to serialize {@code Date} objects according to the pattern provided. You can
* call this method or {@link #setDateFormat(int)} multiple times, but only the last invocation
* will be used to decide the serialization format.
*
* <p>Note that this pattern must abide by the convention provided by {@code SimpleDateFormat}
* class. See the documentation in {@link java.text.SimpleDateFormat} for more information on
* valid date and time patterns.</p>
*
* @param pattern the pattern that dates will be serialized/deserialized to/from
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.2
*/"
"Method: setDateFormat
Description: /**
* Configures Gson to to serialize {@code Date} objects according to the style value provided.
* You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
* invocation will be used to decide the serialization format.
*
* <p>Note that this style value should be one of the predefined constants in the
* {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
* information on the valid style constants.</p>
*
* @param style the predefined date style that date objects will be serialized/deserialized
* to/from
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.2
*/"
"Method: setDateFormat
Description: /**
* Configures Gson to to serialize {@code Date} objects according to the style value provided.
* You can call this method or {@link #setDateFormat(String)} multiple times, but only the last
* invocation will be used to decide the serialization format.
*
* <p>Note that this style value should be one of the predefined constants in the
* {@code DateFormat} class. See the documentation in {@link java.text.DateFormat} for more
* information on the valid style constants.</p>
*
* @param dateStyle the predefined date style that date objects will be serialized/deserialized
* to/from
* @param timeStyle the predefined style for the time portion of the date objects
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.2
*/"
"Method: registerTypeAdapter
Description: /**
* Configures Gson for custom serialization or deserialization. This method combines the
* registration of an {@link InstanceCreator}, {@link JsonSerializer}, and a
* {@link JsonDeserializer}. It is best used when a single object {@code typeAdapter} implements
* all the required interfaces for custom serialization with Gson. If an instance creator,
* serializer or deserializer was previously registered for the specified {@code type}, it is
* overwritten.
*
* @param type the type definition for the type adapter being registered
* @param typeAdapter This object must implement at least one of the {@link InstanceCreator},
* {@link JsonSerializer}, and a {@link JsonDeserializer} interfaces.
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
*/"
"Method: registerTypeHierarchyAdapter
Description: /**
* Configures Gson for custom serialization or deserialization for an inheritance type hierarchy.
* This method combines the registration of an {@link InstanceCreator}, {@link JsonSerializer},
* and a {@link JsonDeserializer}. It is best used when a single object {@code typeAdapter}
* implements all the required interfaces for custom serialization with Gson.
* If an instance creator, serializer or deserializer was previously registered for the specified
* type hierarchy, it is overwritten. If an instance creator, serializer or deserializer is
* registered for a specific type in the type hierarchy, it will be invoked instead of the one
* registered for the type hierarchy.
*
* @param baseType the class definition for the type adapter being registered for the base class
*        or interface
* @param typeAdapter This object must implement at least one of the {@link InstanceCreator},
* {@link JsonSerializer}, and a {@link JsonDeserializer} interfaces.
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.6
*/"
"Method: serializeSpecialFloatingPointValues
Description: /**
"* Section 2.4 of <a href="http://www.ietf.org/rfc/rfc4627.txt">JSON specification</a> disallows"
* special double values (NaN, Infinity, -Infinity). However,
"* <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf">Javascript"
* specification</a> (see section 4.3.20, 4.3.22, 4.3.23) allows these values as valid Javascript
* values. Moreover, most JavaScript engines will accept these special values in JSON without
* problem. So, at a practical level, it makes sense to accept these values as valid JSON even
* though JSON specification disallows them.
*
* <p>Gson always accepts these special values during deserialization. However, it outputs
* strictly compliant JSON. Hence, if it encounters a float value {@link Float#NaN},
* {@link Float#POSITIVE_INFINITY}, {@link Float#NEGATIVE_INFINITY}, or a double value
* {@link Double#NaN}, {@link Double#POSITIVE_INFINITY}, {@link Double#NEGATIVE_INFINITY}, it
* will throw an {@link IllegalArgumentException}. This method provides a way to override the
* default behavior when you know that the JSON receiver will be able to handle these special
* values.
*
"* @return a reference to this {@code GsonBuilder} object to fulfill the "Builder" pattern"
* @since 1.3
*/"
"Method: create
Description: /**
* Creates a {@link Gson} instance based on the current configuration. This method is free of
* side-effects to this {@code GsonBuilder} instance and hence can be called multiple times.
*
* @return an instance of Gson configured with the options currently set in this builder
*/"