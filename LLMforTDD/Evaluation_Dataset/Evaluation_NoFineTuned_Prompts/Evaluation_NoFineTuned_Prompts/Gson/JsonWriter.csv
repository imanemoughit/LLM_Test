description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: JsonWriter
"Method: setIndent
Description: /**
* Sets the indentation string to be repeated for each level of indentation
* in the encoded document. If {@code indent.isEmpty()} the encoded document
* will be compact. Otherwise the encoded document will be more
* human-readable.
*
* @param indent a string containing only whitespace.
*/"
"Method: setLenient
Description: /**
* Configure this writer to relax its syntax rules. By default, this writer
* only emits well-formed JSON as specified by <a
"* href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>. Setting the writer"
* to lenient permits the following:
* <ul>
*   <li>Top-level values of any type. With strict writing, the top-level
*       value must be an object or an array.
*   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link
*       Double#isInfinite() infinities}.
* </ul>
*/"
"Method: isLenient
Description: /**
* Returns true if this writer has relaxed syntax rules.
*/"
"Method: setHtmlSafe
Description: /**
* Configure this writer to emit JSON that's safe for direct inclusion in HTML
* and XML documents. This escapes the HTML characters {@code <}, {@code >},
* {@code &} and {@code =} before writing them to the stream. Without this
* setting, your XML/HTML encoder should replace these characters with the
* corresponding escape sequences.
*/"
"Method: isHtmlSafe
Description: /**
* Returns true if this writer writes JSON that's safe for inclusion in HTML
* and XML documents.
*/"
"Method: beginArray
Description: /**
* Begins encoding a new array. Each call to this method must be paired with
* a call to {@link #endArray}.
*
* @return this writer.
*/"
"Method: endArray
Description: /**
* Ends encoding the current array.
*
* @return this writer.
*/"
"Method: beginObject
Description: /**
* Begins encoding a new object. Each call to this method must be paired
* with a call to {@link #endObject}.
*
* @return this writer.
*/"
"Method: endObject
Description: /**
* Ends encoding the current object.
*
* @return this writer.
*/"
"Method: name
Description: /**
* Encodes the property name.
*
* @param name the name of the forthcoming value. May not be null.
* @return this writer.
*/"
"Method: value
Description: /**
* Encodes {@code value}.
*
* @param value the literal string value, or null to encode a null literal.
* @return this writer.
*/"
"Method: nullValue
Description: /**
* Encodes {@code null}.
*
* @return this writer.
*/"
"Method: value
Description: /**
* Encodes {@code value}.
*
* @return this writer.
*/"
"Method: value
Description: /**
* Encodes {@code value}.
*
* @param value a finite value. May not be {@link Double#isNaN() NaNs} or
*     {@link Double#isInfinite() infinities}.
* @return this writer.
*/"
"Method: value
Description: /**
* Encodes {@code value}.
*
* @return this writer.
*/"
"Method: value
Description: /**
* Encodes {@code value}.
*
* @param value a finite value. May not be {@link Double#isNaN() NaNs} or
*     {@link Double#isInfinite() infinities}.
* @return this writer.
*/"
"Method: flush
Description: /**
* Ensures all buffered data is written to the underlying {@link Writer}
* and flushes that writer.
*/"
"Method: close
Description: /**
* Flushes and closes this writer and the underlying {@link Writer}.
*
* @throws IOException if the JSON document is incomplete.
*/"