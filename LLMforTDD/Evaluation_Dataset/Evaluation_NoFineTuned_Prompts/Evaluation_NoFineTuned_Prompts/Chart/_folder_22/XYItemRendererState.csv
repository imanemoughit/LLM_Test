description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: getProcessVisibleItemsOnly
Description: /**
* Returns the flag that controls whether the plot passes all data
* items in each series to the renderer, or just the visible items.  The
* default value is <code>true</code>.
*
* @return A boolean.
*
* @since 1.0.6
*
* @see #setProcessVisibleItemsOnly(boolean)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: setProcessVisibleItemsOnly
Description: /**
* Sets the flag that controls whether the plot passes all data
* items in each series to the renderer, or just the visible items.
*
* @param flag  the new flag value.
*
* @since 1.0.6
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: getFirstItemIndex
Description: /**
* Returns the first item index (this is updated with each call to
* {@link #startSeriesPass(XYDataset, int, int, int, int, int)}.
*
* @return The first item index.
*
* @since 1.0.11
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: getLastItemIndex
Description: /**
* Returns the last item index (this is updated with each call to
* {@link #startSeriesPass(XYDataset, int, int, int, int, int)}.
*
* @return The last item index.
*
* @since 1.0.11
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: getCrosshairState
Description: /**
* Returns the crosshair state, if any.
*
* @return The crosshair state (possibly <code>null</code>).
*
* @since 1.2.0
*
* @see #setCrosshairState(XYCrosshairState)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: setCrosshairState
Description: /**
* Sets the crosshair state.
*
* @param state  the new state (<code>null</code> permitted).
*
* @since 1.2.0
*
* @see #getCrosshairState()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: getSelectionState
Description: /**
* Returns the selection state.
*
* @return The selection state (possibly <code>null</code>).
*
* @since 1.2.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: setSelectionState
Description: /**
* Sets the selection state.
*
* @param state  the selection state (<code>null</code> permitted).
*
* @since 1.2.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: startSeriesPass
Description: /**
* This method is called by the {@link XYPlot} when it starts a pass
* through the (visible) items in a series.  The default implementation
* records the first and last item indices - override this method to
* implement additional specialised behaviour.
*
* @param dataset  the dataset.
* @param series  the series index.
* @param firstItem  the index of the first item in the series.
* @param lastItem  the index of the last item in the series.
* @param pass  the pass index.
* @param passCount  the number of passes.
*
* @see #endSeriesPass(XYDataset, int, int, int, int, int)
*
* @since 1.0.11
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: XYItemRendererState, Method: endSeriesPass
Description: /**
* This method is called by the {@link XYPlot} when it ends a pass
* through the (visible) items in a series.  The default implementation
* does nothing, but you can override this method to implement specialised
* behaviour.
*
* @param dataset  the dataset.
* @param series  the series index.
* @param firstItem  the index of the first item in the series.
* @param lastItem  the index of the last item in the series.
* @param pass  the pass index.
* @param passCount  the number of passes.
*
* @see #startSeriesPass(XYDataset, int, int, int, int, int)
*
* @since 1.0.11
*/"

