description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getDatasetGroup
Description: /**
* Returns the dataset group for the plot (not currently used).
*
* @return The dataset group.
*
* @see #setDatasetGroup(DatasetGroup)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getNoDataMessage
Description: /**
* Returns the string that is displayed when the dataset is empty or
* <code>null</code>.
*
* @return The 'no data' message (<code>null</code> possible).
*
* @see #setNoDataMessage(String)
* @see #getNoDataMessageFont()
* @see #getNoDataMessagePaint()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setNoDataMessage
Description: /**
* Sets the message that is displayed when the dataset is empty or
* <code>null</code>, and sends a {@link PlotChangeEvent} to all registered
* listeners.
*
* @param message  the message (<code>null</code> permitted).
*
* @see #getNoDataMessage()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getNoDataMessageFont
Description: /**
* Returns the font used to display the 'no data' message.
*
* @return The font (never <code>null</code>).
*
* @see #setNoDataMessageFont(Font)
* @see #getNoDataMessage()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setNoDataMessageFont
Description: /**
* Sets the font used to display the 'no data' message and sends a
* {@link PlotChangeEvent} to all registered listeners.
*
* @param font  the font (<code>null</code> not permitted).
*
* @see #getNoDataMessageFont()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getNoDataMessagePaint
Description: /**
* Returns the paint used to display the 'no data' message.
*
* @return The paint (never <code>null</code>).
*
* @see #setNoDataMessagePaint(Paint)
* @see #getNoDataMessage()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setNoDataMessagePaint
Description: /**
* Sets the paint used to display the 'no data' message and sends a
* {@link PlotChangeEvent} to all registered listeners.
*
* @param paint  the paint (<code>null</code> not permitted).
*
* @see #getNoDataMessagePaint()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getPlotType
Description: /**
* Returns a short string describing the plot type.
* <P>
* Note: this gets used in the chart property editing user interface,
* but there needs to be a better mechanism for identifying the plot type.
*
* @return A short string describing the plot type (never
*     <code>null</code>).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getParent
Description: /**
* Returns the parent plot (or <code>null</code> if this plot is not part
* of a combined plot).
*
* @return The parent plot.
*
* @see #setParent(Plot)
* @see #getRootPlot()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setParent
Description: /**
* Sets the parent plot.  This method is intended for internal use, you
* shouldn't need to call it directly.
*
* @param parent  the parent plot (<code>null</code> permitted).
*
* @see #getParent()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getRootPlot
Description: /**
* Returns the root plot.
*
* @return The root plot.
*
* @see #getParent()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: isSubplot
Description: /**
* Returns <code>true</code> if this plot is part of a combined plot
* structure (that is, {@link #getParent()} returns a non-<code>null</code>
* value), and <code>false</code> otherwise.
*
* @return <code>true</code> if this plot is part of a combined plot
*         structure.
*
* @see #getParent()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getInsets
Description: /**
* Returns the insets for the plot area.
*
* @return The insets (never <code>null</code>).
*
* @see #setInsets(RectangleInsets)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setInsets
Description: /**
* Sets the insets for the plot and sends a {@link PlotChangeEvent} to
* all registered listeners.
*
* @param insets  the new insets (<code>null</code> not permitted).
*
* @see #getInsets()
* @see #setInsets(RectangleInsets, boolean)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setInsets
Description: /**
* Sets the insets for the plot and, if requested,  and sends a
* {@link PlotChangeEvent} to all registered listeners.
*
* @param insets  the new insets (<code>null</code> not permitted).
* @param notify  a flag that controls whether the registered listeners are
*                notified.
*
* @see #getInsets()
* @see #setInsets(RectangleInsets)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getBackgroundPaint
Description: /**
* Returns the background color of the plot area.
*
* @return The paint (possibly <code>null</code>).
*
* @see #setBackgroundPaint(Paint)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setBackgroundPaint
Description: /**
* Sets the background color of the plot area and sends a
* {@link PlotChangeEvent} to all registered listeners.
*
* @param paint  the paint (<code>null</code> permitted).
*
* @see #getBackgroundPaint()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getBackgroundAlpha
Description: /**
* Returns the alpha transparency of the plot area background.
*
* @return The alpha transparency.
*
* @see #setBackgroundAlpha(float)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setBackgroundAlpha
Description: /**
* Sets the alpha transparency of the plot area background, and notifies
* registered listeners that the plot has been modified.
*
* @param alpha the new alpha value (in the range 0.0f to 1.0f).
*
* @see #getBackgroundAlpha()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getDrawingSupplier
Description: /**
* Returns the drawing supplier for the plot.
*
* @return The drawing supplier (possibly <code>null</code>).
*
* @see #setDrawingSupplier(DrawingSupplier)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setDrawingSupplier
Description: /**
* Sets the drawing supplier for the plot and sends a
* {@link PlotChangeEvent} to all registered listeners.  The drawing
* supplier is responsible for supplying a limitless (possibly repeating)
* sequence of <code>Paint</code>, <code>Stroke</code> and
* <code>Shape</code> objects that the plot's renderer(s) can use to
* populate its (their) tables.
*
* @param supplier  the new supplier.
*
* @see #getDrawingSupplier()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setDrawingSupplier
Description: /**
* Sets the drawing supplier for the plot and, if requested, sends a
* {@link PlotChangeEvent} to all registered listeners.  The drawing
* supplier is responsible for supplying a limitless (possibly repeating)
* sequence of <code>Paint</code>, <code>Stroke</code> and
* <code>Shape</code> objects that the plot's renderer(s) can use to
* populate its (their) tables.
*
* @param supplier  the new supplier.
* @param notify  notify listeners?
*
* @see #getDrawingSupplier()
*
* @since 1.0.11
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getBackgroundImage
Description: /**
* Returns the background image that is used to fill the plot's background
* area.
*
* @return The image (possibly <code>null</code>).
*
* @see #setBackgroundImage(Image)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setBackgroundImage
Description: /**
* Sets the background image for the plot and sends a
* {@link PlotChangeEvent} to all registered listeners.
*
* @param image  the image (<code>null</code> permitted).
*
* @see #getBackgroundImage()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getBackgroundImageAlignment
Description: /**
* Returns the background image alignment. Alignment constants are defined
* in the {@link Align} class.
*
* @return The alignment.
*
* @see #setBackgroundImageAlignment(int)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setBackgroundImageAlignment
Description: /**
* Sets the alignment for the background image and sends a
* {@link PlotChangeEvent} to all registered listeners.  Alignment options
* are defined by the {@link Align} class.
*
* @param alignment  the alignment.
*
* @see #getBackgroundImageAlignment()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getBackgroundImageAlpha
Description: /**
* Returns the alpha transparency used to draw the background image.  This
* is a value in the range 0.0f to 1.0f, where 0.0f is fully transparent
* and 1.0f is fully opaque.
*
* @return The alpha transparency.
*
* @see #setBackgroundImageAlpha(float)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setBackgroundImageAlpha
Description: /**
* Sets the alpha transparency used when drawing the background image.
*
* @param alpha  the alpha transparency (in the range 0.0f to 1.0f, where
*     0.0f is fully transparent, and 1.0f is fully opaque).
*
* @throws IllegalArgumentException if <code>alpha</code> is not within
*     the specified range.
*
* @see #getBackgroundImageAlpha()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: isOutlineVisible
Description: /**
* Returns the flag that controls whether or not the plot outline is
* drawn.  The default value is <code>true</code>.  Note that for
* historical reasons, the plot's outline paint and stroke can take on
* <code>null</code> values, in which case the outline will not be drawn
* even if this flag is set to <code>true</code>.
*
* @return The outline visibility flag.
*
* @since 1.0.6
*
* @see #setOutlineVisible(boolean)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setOutlineVisible
Description: /**
* Sets the flag that controls whether or not the plot's outline is
* drawn, and sends a {@link PlotChangeEvent} to all registered listeners.
*
* @param visible  the new flag value.
*
* @since 1.0.6
*
* @see #isOutlineVisible()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getOutlineStroke
Description: /**
* Returns the stroke used to outline the plot area.
*
* @return The stroke (possibly <code>null</code>).
*
* @see #setOutlineStroke(Stroke)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setOutlineStroke
Description: /**
* Sets the stroke used to outline the plot area and sends a
* {@link PlotChangeEvent} to all registered listeners. If you set this
* attribute to <code>null</code>, no outline will be drawn.
*
* @param stroke  the stroke (<code>null</code> permitted).
*
* @see #getOutlineStroke()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getOutlinePaint
Description: /**
* Returns the color used to draw the outline of the plot area.
*
* @return The color (possibly <code>null<code>).
*
* @see #setOutlinePaint(Paint)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setOutlinePaint
Description: /**
* Sets the paint used to draw the outline of the plot area and sends a
* {@link PlotChangeEvent} to all registered listeners.  If you set this
* attribute to <code>null</code>, no outline will be drawn.
*
* @param paint  the paint (<code>null</code> permitted).
*
* @see #getOutlinePaint()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getForegroundAlpha
Description: /**
* Returns the alpha-transparency for the plot foreground.
*
* @return The alpha-transparency.
*
* @see #setForegroundAlpha(float)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setForegroundAlpha
Description: /**
* Sets the alpha-transparency for the plot and sends a
* {@link PlotChangeEvent} to all registered listeners.
*
* @param alpha  the new alpha transparency.
*
* @see #getForegroundAlpha()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: getLegendItems
Description: /**
* Returns the legend items for the plot.  By default, this method returns
* <code>null</code>.  Subclasses should override to return a
* {@link LegendItemCollection}.
*
* @return The legend items for the plot (possibly <code>null</code>).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: isNotify
Description: /**
* Returns a flag that controls whether or not change events are sent to
* registered listeners.
*
* @return A boolean.
*
* @see #setNotify(boolean)
*
* @since 1.0.13
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: setNotify
Description: /**
* Sets a flag that controls whether or not listeners receive
* {@link PlotChangeEvent} notifications.
*
* @param notify  a boolean.
*
* @see #isNotify()
*
* @since 1.0.13
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: addChangeListener
Description: /**
* Registers an object for notification of changes to the plot.
*
* @param listener  the object to be registered.
*
* @see #removeChangeListener(PlotChangeListener)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: removeChangeListener
Description: /**
* Unregisters an object for notification of changes to the plot.
*
* @param listener  the object to be unregistered.
*
* @see #addChangeListener(PlotChangeListener)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: notifyListeners
Description: /**
* Notifies all registered listeners that the plot has been modified.
*
* @param event  information about the change event.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: draw
Description: /**
* Draws the plot within the specified area.  The anchor is a point on the
* chart that is specified externally (for instance, it may be the last
* point of the last mouse click performed by the user) - plots can use or
* ignore this value as they see fit.
* <br><br>
* Subclasses need to provide an implementation of this method, obviously.
*
* @param g2  the graphics device.
* @param area  the plot area.
* @param anchor  the anchor point (<code>null</code> permitted).
* @param parentState  the parent state (if any).
* @param info  carries back plot rendering info.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: drawBackground
Description: /**
* Draws the plot background (the background color and/or image).
* <P>
* This method will be called during the chart drawing process and is
* declared public so that it can be accessed by the renderers used by
* certain subclasses.  You shouldn't need to call this method directly.
*
* @param g2  the graphics device.
* @param area  the area within which the plot should be drawn.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: drawBackgroundImage
Description: /**
* Draws the background image (if there is one) aligned within the
* specified area.
*
* @param g2  the graphics device.
* @param area  the area.
*
* @see #getBackgroundImage()
* @see #getBackgroundImageAlignment()
* @see #getBackgroundImageAlpha()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: drawOutline
Description: /**
* Draws the plot outline.  This method will be called during the chart
* drawing process and is declared public so that it can be accessed by the
* renderers used by certain subclasses. You shouldn't need to call this
* method directly.
*
* @param g2  the graphics device.
* @param area  the area within which the plot should be drawn.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: handleClick
Description: /**
* Handles a 'click' on the plot.  Since the plot does not maintain any
* information about where it has been drawn, the plot rendering info is
* supplied as an argument so that the plot dimensions can be determined.
*
* @param x  the x coordinate (in Java2D space).
* @param y  the y coordinate (in Java2D space).
* @param info  an object containing information about the dimensions of
*              the plot.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: zoom
Description: /**
* Performs a zoom on the plot.  Subclasses should override if zooming is
* appropriate for the type of plot.
*
* @param percent  the zoom percentage.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: annotationChanged
Description: /**
* Receives notification of a change to an {@link Annotation} added to
* this plot.
*
* @param event  information about the event (not used here).
*
* @since 1.0.14
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: axisChanged
Description: /**
* Receives notification of a change to one of the plot's axes.
*
* @param event  information about the event (not used here).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: datasetChanged
Description: /**
* Receives notification of a change to the plot's dataset.
* <P>
* The plot reacts by passing on a plot change event to all registered
* listeners.
*
* @param event  information about the event (not used here).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: markerChanged
Description: /**
* Receives notification of a change to a marker that is assigned to the
* plot.
*
* @param event  the event.
*
* @since 1.0.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: equals
Description: /**
* Tests this plot for equality with another object.
*
* @param obj  the object (<code>null</code> permitted).
*
* @return <code>true</code> or <code>false</code>.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: clone
Description: /**
* Creates a clone of the plot.
*
* @return A clone.
*
* @throws CloneNotSupportedException if some component of the plot does not
*         support cloning.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: resolveDomainAxisLocation
Description: /**
* Resolves a domain axis location for a given plot orientation.
*
* @param location  the location (<code>null</code> not permitted).
* @param orientation  the orientation (<code>null</code> not permitted).
*
* @return The edge (never <code>null</code>).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Plot, Method: resolveRangeAxisLocation
Description: /**
* Resolves a range axis location for a given plot orientation.
*
* @param location  the location (<code>null</code> not permitted).
* @param orientation  the orientation (<code>null</code> not permitted).
*
* @return The edge (never <code>null</code>).
*/"

