description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: getCategory1
Description: /**
* Returns the category for the start of the line.
*
* @return The category for the start of the line (never <code>null</code>).
*
* @see #setCategory1(Comparable)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: setCategory1
Description: /**
* Sets the category for the start of the line and sends an
* {@link AnnotationChangeEvent} to all registered listeners.
*
* @param category  the category (<code>null</code> not permitted).
*
* @see #getCategory1()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: getValue1
Description: /**
* Returns the y-value for the start of the line.
*
* @return The y-value for the start of the line.
*
* @see #setValue1(double)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: setValue1
Description: /**
* Sets the y-value for the start of the line and sends an
* {@link AnnotationChangeEvent} to all registered listeners.
*
* @param value  the value.
*
* @see #getValue1()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: getCategory2
Description: /**
* Returns the category for the end of the line.
*
* @return The category for the end of the line (never <code>null</code>).
*
* @see #setCategory2(Comparable)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: setCategory2
Description: /**
* Sets the category for the end of the line and sends an
* {@link AnnotationChangeEvent} to all registered listeners.
*
* @param category  the category (<code>null</code> not permitted).
*
* @see #getCategory2()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: getValue2
Description: /**
* Returns the y-value for the end of the line.
*
* @return The y-value for the end of the line.
*
* @see #setValue2(double)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: setValue2
Description: /**
* Sets the y-value for the end of the line and sends an
* {@link AnnotationChangeEvent} to all registered listeners.
*
* @param value  the value.
*
* @see #getValue2()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: getPaint
Description: /**
* Returns the paint used to draw the connecting line.
*
* @return The paint (never <code>null</code>).
*
* @see #setPaint(Paint)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: setPaint
Description: /**
* Sets the paint used to draw the connecting line and sends an
* {@link AnnotationChangeEvent} to all registered listeners.
*
* @param paint  the paint (<code>null</code> not permitted).
*
* @see #getPaint()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: getStroke
Description: /**
* Returns the stroke used to draw the connecting line.
*
* @return The stroke (never <code>null</code>).
*
* @see #setStroke(Stroke)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: setStroke
Description: /**
* Sets the stroke used to draw the connecting line and sends an
* {@link AnnotationChangeEvent} to all registered listeners.
*
* @param stroke  the stroke (<code>null</code> not permitted).
*
* @see #getStroke()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: draw
Description: /**
* Draws the annotation.
*
* @param g2  the graphics device.
* @param plot  the plot.
* @param dataArea  the data area.
* @param domainAxis  the domain axis.
* @param rangeAxis  the range axis.
* @param rendererIndex  the renderer index.
* @param info  the plot info (<code>null</code> permitted).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: equals
Description: /**
* Tests this object for equality with another.
*
* @param obj  the object (<code>null</code> permitted).
*
* @return <code>true</code> or <code>false</code>.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: hashCode
Description: /**
* Returns a hash code for this instance.
*
* @return A hash code.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CategoryLineAnnotation, Method: clone
Description: /**
* Returns a clone of the annotation.
*
* @return A clone.
*
* @throws CloneNotSupportedException  this class will not throw this
*         exception, but subclasses (if any) might.
*/"

