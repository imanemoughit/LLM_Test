description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getCrosshairDistance
Description: /**
* Returns the distance between the anchor point and the current crosshair
* point.
*
* @return The distance.
*
* @see #setCrosshairDistance(double)
* @since 1.0.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: setCrosshairDistance
Description: /**
* Sets the distance between the anchor point and the current crosshair
* point.  As each data point is processed, its distance to the anchor
* point is compared with this value and, if it is closer, the data point
* becomes the new crosshair point.
*
* @param distance  the distance.
*
* @see #getCrosshairDistance()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: updateCrosshairPoint
Description: /**
* Evaluates a data point and if it is the closest to the anchor point it
* becomes the new crosshair point.
* <P>
* To understand this method, you need to know the context in which it will
* be called.  An instance of this class is passed to an
* {@link XYItemRenderer} as
* each data point is plotted.  As the point is plotted, it is passed to
* this method to see if it should be the new crosshair point.
*
* @param x  x coordinate (measured against the domain axis).
* @param y  y coordinate (measured against the range axis).
* @param transX  x translated into Java2D space.
* @param transY  y translated into Java2D space.
* @param orientation  the plot orientation.
*
* @deprecated Use {@link #updateCrosshairPoint(double, double, int, int,
*     double, double, PlotOrientation)}.  See bug report 1086307.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: updateCrosshairPoint
Description: /**
* Evaluates a data point and if it is the closest to the anchor point it
* becomes the new crosshair point.
* <P>
* To understand this method, you need to know the context in which it will
* be called.  An instance of this class is passed to an
* {@link XYItemRenderer} as
* each data point is plotted.  As the point is plotted, it is passed to
* this method to see if it should be the new crosshair point.
*
* @param x  x coordinate (measured against the domain axis).
* @param y  y coordinate (measured against the range axis).
* @param domainAxisIndex  the index of the domain axis for this point.
* @param rangeAxisIndex  the index of the range axis for this point.
* @param transX  x translated into Java2D space.
* @param transY  y translated into Java2D space.
* @param orientation  the plot orientation.
*
* @since 1.0.4
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: updateCrosshairX
Description: /**
* Evaluates an x-value and if it is the closest to the anchor x-value it
* becomes the new crosshair value.
* <P>
* Used in cases where only the x-axis is numerical.
*
* @param candidateX  x position of the candidate for the new crosshair
*                    point.
*
* @deprecated Use {@link #updateCrosshairX(double, int)}.  See bug report
*     1086307.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: updateCrosshairX
Description: /**
* Evaluates an x-value and if it is the closest to the anchor x-value it
* becomes the new crosshair value.
* <P>
* Used in cases where only the x-axis is numerical.
*
* @param candidateX  x position of the candidate for the new crosshair
*                    point.
* @param domainAxisIndex  the index of the domain axis for this x-value.
*
* @since 1.0.4
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: updateCrosshairY
Description: /**
* Evaluates a y-value and if it is the closest to the anchor y-value it
* becomes the new crosshair value.
* <P>
* Used in cases where only the y-axis is numerical.
*
* @param candidateY  y position of the candidate for the new crosshair
*                    point.
*
* @deprecated Use {@link #updateCrosshairY(double, int)}.  See bug report
*     1086307.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: updateCrosshairY
Description: /**
* Evaluates a y-value and if it is the closest to the anchor y-value it
* becomes the new crosshair value.
* <P>
* Used in cases where only the y-axis is numerical.
*
* @param candidateY  y position of the candidate for the new crosshair
*                    point.
* @param rangeAxisIndex  the index of the range axis for this y-value.
*
* @since 1.0.4
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getAnchor
Description: /**
* Returns the anchor point.
*
* @return The anchor point.
*
* @see #setAnchor(Point2D)
*
* @since 1.0.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: setAnchor
Description: /**
* Sets the anchor point.  This is usually the mouse click point in a chart
* panel, and the crosshair point will often be the data item that is
* closest to the anchor point.
* <br><br>
* Note that the x and y coordinates (in data space) are not updated by
* this method - the caller is responsible for ensuring that this happens
* in sync.
*
* @param anchor  the anchor point (<code>null</code> permitted).
*
* @see #getAnchor()
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getAnchorX
Description: /**
* Returns the x-coordinate (in data space) for the anchor point.
*
* @return The x-coordinate of the anchor point.
*
* @since 1.0.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: setAnchorX
Description: /**
* Sets the x-coordinate (in data space) for the anchor point.  Note that
* this does NOT update the anchor itself - the caller is responsible for
* ensuring this is done in sync.
*
* @param x  the x-coordinate.
*
* @since 1.0.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getAnchorY
Description: /**
* Returns the y-coordinate (in data space) for the anchor point.
*
* @return The y-coordinate of teh anchor point.
*
* @since 1.0.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: setAnchorY
Description: /**
* Sets the y-coordinate (in data space) for the anchor point.  Note that
* this does NOT update the anchor itself - the caller is responsible for
* ensuring this is done in sync.
*
* @param y  the y-coordinate.
*
* @since 1.0.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getCrosshairX
Description: /**
* Get the x-value for the crosshair point.
*
* @return The x position of the crosshair point.
*
* @see #setCrosshairX(double)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: setCrosshairX
Description: /**
* Sets the x coordinate for the crosshair.  This is the coordinate in data
* space measured against the domain axis.
*
* @param x the coordinate.
*
* @see #getCrosshairX()
* @see #setCrosshairY(double)
* @see #updateCrosshairPoint(double, double, double, double,
* PlotOrientation)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getCrosshairY
Description: /**
* Get the y-value for the crosshair point.  This is the coordinate in data
* space measured against the range axis.
*
* @return The y position of the crosshair point.
*
* @see #setCrosshairY(double)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: setCrosshairY
Description: /**
* Sets the y coordinate for the crosshair.
*
* @param y  the y coordinate.
*
* @see #getCrosshairY()
* @see #setCrosshairX(double)
* @see #updateCrosshairPoint(double, double, double, double,
* PlotOrientation)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getDatasetIndex
Description: /**
* Returns the dataset index that the crosshair values relate to.  The
* dataset is mapped to specific axes, and this is how the crosshairs are
* mapped also.
*
* @return The dataset index.
*
* @see #setDatasetIndex(int)
*
* @since 1.0.11
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: setDatasetIndex
Description: /**
* Sets the dataset index that the current crosshair values relate to.
*
* @param index  the dataset index.
*
* @see #getDatasetIndex()
*
* @since 1.0.11
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getDomainAxisIndex
Description: /**
* Returns the domain axis index for the crosshair x-value.
*
* @return The domain axis index.
*
* @since 1.0.4
*
* @deprecated As of version 1.0.11, the domain axis should be determined
*     using the dataset index.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: CrosshairState, Method: getRangeAxisIndex
Description: /**
* Returns the range axis index for the crosshair y-value.
*
* @return The range axis index.
*
* @since 1.0.4
*
* @deprecated As of version 1.0.11, the domain axis should be determined
*     using the dataset index.
*/"

