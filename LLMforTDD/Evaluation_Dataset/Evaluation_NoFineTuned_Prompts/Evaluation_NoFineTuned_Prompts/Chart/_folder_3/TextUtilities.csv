description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: createTextBlock
Description: /**
* Creates a {@link TextBlock} from a <code>String</code>.  Line breaks
* are added where the <code>String</code> contains '\n' characters.
*
* @param text  the text.
* @param font  the font.
* @param paint  the paint.
*
* @return A text block.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: createTextBlock
Description: /**
* Creates a new text block from the given string, breaking the
* text into lines so that the <code>maxWidth</code> value is
* respected.
*
* @param text  the text.
* @param font  the font.
* @param paint  the paint.
* @param maxWidth  the maximum width for each line.
* @param measurer  the text measurer.
*
* @return A text block.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: createTextBlock
Description: /**
* Creates a new text block from the given string, breaking the
* text into lines so that the <code>maxWidth</code> value is
* respected.
*
* @param text  the text.
* @param font  the font.
* @param paint  the paint.
* @param maxWidth  the maximum width for each line.
* @param maxLines  the maximum number of lines.
* @param measurer  the text measurer.
*
* @return A text block.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: getTextBounds
Description: /**
* Returns the bounds for the specified text.
*
* @param text  the text (<code>null</code> permitted).
* @param g2  the graphics context (not <code>null</code>).
* @param fm  the font metrics (not <code>null</code>).
*
* @return The text bounds (<code>null</code> if the <code>text</code>
*         argument is <code>null</code>).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: drawAlignedString
Description: /**
* Draws a string such that the specified anchor point is aligned to the
* given (x, y) location.
*
* @param text  the text.
* @param g2  the graphics device.
* @param x  the x coordinate (Java 2D).
* @param y  the y coordinate (Java 2D).
* @param anchor  the anchor location.
*
* @return The text bounds (adjusted for the text position).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: setUseDrawRotatedStringWorkaround
Description: /**
* Sets the flag that controls whether or not a workaround is used for
* drawing rotated strings.  The related bug is on Sun's bug parade
* (id 4312117) and the workaround involves using a <code>TextLayout</code>
* instance to draw the text instead of calling the
* <code>drawString()</code> method in the <code>Graphics2D</code> class.
*
* @param use  the new flag value.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: drawRotatedString
Description: /**
* A utility method for drawing rotated text.
* <P>
* A common rotation is -Math.PI/2 which draws text 'vertically' (with the
* top of the characters on the left).
*
* @param text  the text.
* @param g2  the graphics device.
* @param angle  the angle of the (clockwise) rotation (in radians).
* @param x  the x-coordinate.
* @param y  the y-coordinate.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: drawRotatedString
Description: /**
* A utility method for drawing rotated text.
* <P>
* A common rotation is -Math.PI/2 which draws text 'vertically' (with the
* top of the characters on the left).
*
* @param text  the text.
* @param g2  the graphics device.
* @param textX  the x-coordinate for the text (before rotation).
* @param textY  the y-coordinate for the text (before rotation).
* @param angle  the angle of the (clockwise) rotation (in radians).
* @param rotateX  the point about which the text is rotated.
* @param rotateY  the point about which the text is rotated.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: drawRotatedString
Description: /**
* Draws a string that is aligned by one anchor point and rotated about
* another anchor point.
*
* @param text  the text.
* @param g2  the graphics device.
* @param x  the x-coordinate for positioning the text.
* @param y  the y-coordinate for positioning the text.
* @param textAnchor  the text anchor.
* @param angle  the rotation angle.
* @param rotationX  the x-coordinate for the rotation anchor point.
* @param rotationY  the y-coordinate for the rotation anchor point.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: drawRotatedString
Description: /**
* Draws a string that is aligned by one anchor point and rotated about
* another anchor point.
*
* @param text  the text.
* @param g2  the graphics device.
* @param x  the x-coordinate for positioning the text.
* @param y  the y-coordinate for positioning the text.
* @param textAnchor  the text anchor.
* @param angle  the rotation angle (in radians).
* @param rotationAnchor  the rotation anchor.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: calculateRotatedStringBounds
Description: /**
* Returns a shape that represents the bounds of the string after the
* specified rotation has been applied.
*
* @param text  the text (<code>null</code> permitted).
* @param g2  the graphics device.
* @param x  the x coordinate for the anchor point.
* @param y  the y coordinate for the anchor point.
* @param textAnchor  the text anchor.
* @param angle  the angle.
* @param rotationAnchor  the rotation anchor.
*
* @return The bounds (possibly <code>null</code>).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: calculateRotatedStringBounds
Description: /**
* Returns a shape that represents the bounds of the string after the
* specified rotation has been applied.
*
* @param text  the text (<code>null</code> permitted).
* @param g2  the graphics device.
* @param textX  the x coordinate for the text.
* @param textY  the y coordinate for the text.
* @param angle  the angle.
* @param rotateX  the x coordinate for the rotation point.
* @param rotateY  the y coordinate for the rotation point.
*
* @return The bounds (<code>null</code> if <code>text</code> is
*         </code>null</code> or has zero length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: getUseFontMetricsGetStringBounds
Description: /**
* Returns the flag that controls whether the FontMetrics.getStringBounds()
* method is used or not.  If you are having trouble with label alignment
* or positioning, try changing the value of this flag.
*
* @return A boolean.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: setUseFontMetricsGetStringBounds
Description: /**
* Sets the flag that controls whether the FontMetrics.getStringBounds()
* method is used or not.  If you are having trouble with label alignment
* or positioning, try changing the value of this flag.
*
* @param use  the flag.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: TextUtilities, Method: isUseDrawRotatedStringWorkaround
Description: /**
* Returns the current value of the
* <code>useDrawRotatedStringWorkaround</code> flag.
*
* @return A boolean.
*/"

