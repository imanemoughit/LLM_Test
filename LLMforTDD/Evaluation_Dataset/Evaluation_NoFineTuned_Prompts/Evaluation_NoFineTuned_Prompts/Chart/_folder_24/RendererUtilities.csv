description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: RendererUtilities

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: RendererUtilities, Method: findLiveItemsLowerBound
Description: /**
* Finds the lower index of the range of live items in the specified data
* series.
*
* @param dataset  the dataset (<code>null</code> not permitted).
* @param series  the series index.
* @param xLow  the lowest x-value in the live range.
* @param xHigh  the highest x-value in the live range.
*
* @return The index of the required item.
*
* @since 1.0.6
*
* @see #findLiveItemsUpperBound(XYDataset, int, double, double)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: RendererUtilities, Method: findLiveItemsUpperBound
Description: /**
* Finds the upper index of the range of live items in the specified data
* series.
*
* @param dataset  the dataset (<code>null</code> not permitted).
* @param series  the series index.
* @param xLow  the lowest x-value in the live range.
* @param xHigh  the highest x-value in the live range.
*
* @return The index of the required item.
*
* @since 1.0.6
*
* @see #findLiveItemsLowerBound(XYDataset, int, double, double)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: RendererUtilities, Method: findLiveItems
Description: /**
* Finds a range of item indices that is guaranteed to contain all the
* x-values from x0 to x1 (inclusive).
*
* @param dataset  the dataset (<code>null</code> not permitted).
* @param series  the series index.
* @param xLow  the lower bound of the x-value range.
* @param xHigh  the upper bound of the x-value range.
*
* @return The indices of the boundary items.
*/"

