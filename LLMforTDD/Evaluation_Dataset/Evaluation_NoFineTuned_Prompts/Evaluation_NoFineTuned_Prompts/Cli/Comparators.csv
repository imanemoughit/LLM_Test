description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Comparators
"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Comparators, Method: chain,/**
     * Chains comparators together.
     *
     * @see #chain(Comparator[])
     * @param c0
     *            a comparator
     * @param c1
     *            a comparator
     * @return a chained comparator
     */"
"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Comparators, Method: chain,/**
     * Chains comparators together.
     *
     * @see #chain(Comparator[])
     * @param c0
     *            a comparator
     * @param c1
     *            a comparator
     * @param c2
     *            a comparator
     * @return a chained comparator
     */"
"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Comparators, Method: chain,/**
     * Chains comparators together.
     *
     * @see #chain(Comparator[])
     * @param c0
     *            a comparator
     * @param c1
     *            a comparator
     * @param c2
     *            a comparator
     * @param c3
     *            a comparator
     * @return a chained comparator
     */"
"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Comparators, Method: chain,/**
     * Chains comparators together.
     *
     * @see #chain(Comparator[])
     * @param c0
     *            a comparator
     * @param c1
     *            a comparator
     * @param c2
     *            a comparator
     * @param c3
     *            a comparator
     * @param c4
     *            a comparator
     * @return a chained comparator
     */"
"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Comparators, Method: chain,/**
     * Chains comparators together.
     *
     * @see #chain(Comparator[])
     * @param comparators
     *            a List of comparators to chain together
     * @return a chained comparator
     */"
"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: Comparators, Method: chain,/**
     * Chains an array of comparators together. Each Comparator will be called
     * in turn until one of them return a non-zero value, this value will be
     * returned.
     *
     * @param comparators
     *            the array of comparators
     * @return a chained comparator
     */"
