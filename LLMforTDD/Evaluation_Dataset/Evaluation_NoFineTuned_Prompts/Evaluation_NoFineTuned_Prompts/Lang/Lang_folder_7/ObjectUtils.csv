description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: defaultIfNull
Description: /*** <p>Returns a default value if the object passed is {@code null}.</p>
*
* <pre>
* ObjectUtils.defaultIfNull(null, null)      = null
* ObjectUtils.defaultIfNull(null, )        = 
* ObjectUtils.defaultIfNull(null, zz)      = zz
* ObjectUtils.defaultIfNull(abc, *)        = abc
* ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE
* </pre>
*
* @param <T> the type of the object
* @param object  the {@code Object} to test, may be {@code null}
* @param defaultValue  the default value to return, may be {@code null}
* @return {@code object} if it is not {@code null}, defaultValue otherwise
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: firstNonNull
Description: /*** <p>Returns the first value in the array which is not {@code null}.
* If all the values are {@code null} or the array is {@code null}
* or empty then {@code null} is returned.</p>
*
* <pre>
* ObjectUtils.firstNonNull(null, null)      = null
* ObjectUtils.firstNonNull(null, )        = 
* ObjectUtils.firstNonNull(null, null, )  = 
* ObjectUtils.firstNonNull(null, zz)      = zz
* ObjectUtils.firstNonNull(abc, *)        = abc
* ObjectUtils.firstNonNull(null, xyz, *)  = xyz
* ObjectUtils.firstNonNull(Boolean.TRUE, *) = Boolean.TRUE
* ObjectUtils.firstNonNull()                = null
* </pre>
*
* @param <T> the component type of the array
* @param values  the values to test, may be {@code null} or empty
* @return the first value from {@code values} which is not {@code null},
*  or {@code null} if there are no non-null values
* @since 3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: equals
Description: /*** <p>Compares two objects for equality, where either one or both
* objects may be {@code null}.</p>
*
* <pre>
* ObjectUtils.equals(null, null)                  = true
* ObjectUtils.equals(null, )                    = false
* ObjectUtils.equals(, null)                    = false
* ObjectUtils.equals(, )                      = true
* ObjectUtils.equals(Boolean.TRUE, null)          = false
* ObjectUtils.equals(Boolean.TRUE, true)        = false
* ObjectUtils.equals(Boolean.TRUE, Boolean.TRUE)  = true
* ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) = false
* </pre>
*
* @param object1  the first object, may be {@code null}
* @param object2  the second object, may be {@code null}
* @return {@code true} if the values of both objects are the same
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: notEqual
Description: /*** <p>Compares two objects for inequality, where either one or both
* objects may be {@code null}.</p>
*
* <pre>
* ObjectUtils.notEqual(null, null)                  = false
* ObjectUtils.notEqual(null, )                    = true
* ObjectUtils.notEqual(, null)                    = true
* ObjectUtils.notEqual(, )                      = false
* ObjectUtils.notEqual(Boolean.TRUE, null)          = true
* ObjectUtils.notEqual(Boolean.TRUE, true)        = true
* ObjectUtils.notEqual(Boolean.TRUE, Boolean.TRUE)  = false
* ObjectUtils.notEqual(Boolean.TRUE, Boolean.FALSE) = true
* </pre>
*
* @param object1  the first object, may be {@code null}
* @param object2  the second object, may be {@code null}
* @return {@code false} if the values of both objects are the same
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: hashCode
Description: /*** <p>Gets the hash code of an object returning zero when the
* object is {@code null}.</p>
*
* <pre>
* ObjectUtils.hashCode(null)   = 0
* ObjectUtils.hashCode(obj)    = obj.hashCode()
* </pre>
*
* @param obj  the object to obtain the hash code of, may be {@code null}
* @return the hash code of the object, or zero if null
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: hashCodeMulti
Description: /*** <p>Gets the hash code for multiple objects.</p>
*
* <p>This allows a hash code to be rapidly calculated for a number of objects.
* The hash code for a single object is the <em>not</em> same as {@link #hashCode(Object)}.
* The hash code for multiple objects is the same as that calculated by an
* {@code ArrayList} containing the specified objects.</p>
*
* <pre>
* ObjectUtils.hashCodeMulti()                 = 1
* ObjectUtils.hashCodeMulti((Object[]) null)  = 1
* ObjectUtils.hashCodeMulti(a)                = 31 + a.hashCode()
* ObjectUtils.hashCodeMulti(a,b)              = (31 + a.hashCode()) * 31 + b.hashCode()
* ObjectUtils.hashCodeMulti(a,b,c)            = ((31 + a.hashCode()) * 31 + b.hashCode()) * 31 + c.hashCode()
* </pre>
*
* @param objects  the objects to obtain the hash code of, may be {@code null}
* @return the hash code of the objects, or zero if null
* @since 3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: identityToString
Description: /*** <p>Gets the toString that would be produced by {@code Object}
* if a class did not override toString itself. {@code null}
* will return {@code null}.</p>
*
* <pre>
* ObjectUtils.identityToString(null)         = null
* ObjectUtils.identityToString()           = java.lang.String@1e23
* ObjectUtils.identityToString(Boolean.TRUE) = java.lang.Boolean@7fa
* </pre>
*
* @param object  the object to create a toString for, may be
*  {@code null}
* @return the default toString text, or {@code null} if
*  {@code null} passed in
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: identityToString
Description: /*** <p>Appends the toString that would be produced by {@code Object}
* if a class did not override toString itself. {@code null}
* will throw a NullPointerException for either of the two parameters. </p>
*
* <pre>
* ObjectUtils.identityToString(appendable, )            = appendable.append(java.lang.String@1e23
* ObjectUtils.identityToString(appendable, Boolean.TRUE)  = appendable.append(java.lang.Boolean@7fa
* ObjectUtils.identityToString(appendable, Boolean.TRUE)  = appendable.append(java.lang.Boolean@7fa)
* </pre>
*
* @param appendable  the appendable to append to
* @param object  the object to create a toString for
* @throws IOException
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: identityToString
Description: /*** <p>Appends the toString that would be produced by {@code Object}
* if a class did not override toString itself. {@code null}
* will throw a NullPointerException for either of the two parameters. </p>
*
* <pre>
* ObjectUtils.identityToString(builder, )            = builder.append(java.lang.String@1e23
* ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append(java.lang.Boolean@7fa
* ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append(java.lang.Boolean@7fa)
* </pre>
*
* @param builder  the builder to append to
* @param object  the object to create a toString for
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: identityToString
Description: /*** <p>Appends the toString that would be produced by {@code Object}
* if a class did not override toString itself. {@code null}
* will throw a NullPointerException for either of the two parameters. </p>
*
* <pre>
* ObjectUtils.identityToString(buf, )            = buf.append(java.lang.String@1e23
* ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append(java.lang.Boolean@7fa
* ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append(java.lang.Boolean@7fa)
* </pre>
*
* @param buffer  the buffer to append to
* @param object  the object to create a toString for
* @since 2.4
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: identityToString
Description: /*** <p>Appends the toString that would be produced by {@code Object}
* if a class did not override toString itself. {@code null}
* will throw a NullPointerException for either of the two parameters. </p>
*
* <pre>
* ObjectUtils.identityToString(builder, )            = builder.append(java.lang.String@1e23
* ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append(java.lang.Boolean@7fa
* ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append(java.lang.Boolean@7fa)
* </pre>
*
* @param builder  the builder to append to
* @param object  the object to create a toString for
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: toString
Description: /*** <p>Gets the {@code toString} of an {@code Object} returning
* an empty string () if {@code null} input.</p>
*
* <pre>
* ObjectUtils.toString(null)         = 
* ObjectUtils.toString()           = 
* ObjectUtils.toString(bat)        = bat
* ObjectUtils.toString(Boolean.TRUE) = true
* </pre>
*
* @see StringUtils#defaultString(String)
* @see String#valueOf(Object)
* @param obj  the Object to {@code toString}, may be null
* @return the passed in Object's toString, or {@code } if {@code null} input
* @since 2.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: toString
Description: /*** <p>Gets the {@code toString} of an {@code Object} returning
* a specified text if {@code null} input.</p>
*
* <pre>
* ObjectUtils.toString(null, null)           = null
* ObjectUtils.toString(null, null)         = null
* ObjectUtils.toString(, null)           = 
* ObjectUtils.toString(bat, null)        = bat
* ObjectUtils.toString(Boolean.TRUE, null) = true
* </pre>
*
* @see StringUtils#defaultString(String,String)
* @see String#valueOf(Object)
* @param obj  the Object to {@code toString}, may be null
* @param nullStr  the String to return if {@code null} input, may be null
* @return the passed in Object's toString, or {@code nullStr} if {@code null} input
* @since 2.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: min
Description: /*** <p>Null safe comparison of Comparables.</p>
*
* @param <T> type of the values processed by this method
* @param values the set of comparable values, may be null
* @return
*  <ul>
*   <li>If any objects are non-null and unequal, the lesser object.
*   <li>If all objects are non-null and equal, the first.
*   <li>If any of the comparables are null, the lesser of the non-null objects.
*   <li>If all the comparables are null, null is returned.
*  </ul>
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: max
Description: /*** <p>Null safe comparison of Comparables.</p>
*
* @param <T> type of the values processed by this method
* @param values the set of comparable values, may be null
* @return
*  <ul>
*   <li>If any objects are non-null and unequal, the greater object.
*   <li>If all objects are non-null and equal, the first.
*   <li>If any of the comparables are null, the greater of the non-null objects.
*   <li>If all the comparables are null, null is returned.
*  </ul>
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: compare
Description: /*** <p>Null safe comparison of Comparables.
* {@code null} is assumed to be less than a non-{@code null} value.</p>
*
* @param <T> type of the values processed by this method
* @param c1  the first comparable, may be null
* @param c2  the second comparable, may be null
* @return a negative value if c1 < c2, zero if c1 = c2
*  and a positive value if c1 > c2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: compare
Description: /*** <p>Null safe comparison of Comparables.</p>
*
* @param <T> type of the values processed by this method
* @param c1  the first comparable, may be null
* @param c2  the second comparable, may be null
* @param nullGreater if true {@code null} is considered greater
*  than a non-{@code null} value or if false {@code null} is
*  considered less than a Non-{@code null} value
* @return a negative value if c1 < c2, zero if c1 = c2
*  and a positive value if c1 > c2
* @see java.util.Comparator#compare(Object, Object)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: median
Description: /*** Find the best guess middle value among comparables. If there is an even
* number of total values, the lower of the two middle values will be returned.
* @param <T> type of values processed by this method
* @param items to compare
* @return T at middle position
* @throws NullPointerException if items is {@code null}
* @throws IllegalArgumentException if items is empty or contains {@code null} values
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: median
Description: /*** Find the best guess middle value among comparables. If there is an even
* number of total values, the lower of the two middle values will be returned.
* @param <T> type of values processed by this method
* @param comparator to use for comparisons
* @param items to compare
* @return T at middle position
* @throws NullPointerException if items or comparator is {@code null}
* @throws IllegalArgumentException if items is empty or contains {@code null} values
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: mode
Description: /*** Find the most frequently occurring item.
*
* @param <T> type of values processed by this method
* @param items to check
* @return most populous T, {@code null} if non-unique or no items supplied
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: clone
Description: /*** <p>Clone an object.</p>
*
* @param <T> the type of the object
* @param obj  the object to clone, null returns null
* @return the clone if the object implements {@link Cloneable} otherwise {@code null}
* @throws CloneFailedException if the object is cloneable and the clone operation fails
* @since 3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ObjectUtils, Method: cloneIfPossible
Description: /*** <p>Clone an object if possible.</p>
*
* <p>This method is similar to {@link #clone(Object)}, but will return the provided
* instance as the return value instead of {@code null} if the instance
* is not cloneable. This is more convenient if the caller uses different
* implementations (e.g. of a service) and some of the implementations do not allow concurrent
* processing or have state. In such cases the implementation can simply provide a proper
* clone implementation and the caller's code does not have to change.</p>
*
* @param <T> the type of the object
* @param obj  the object to clone, null returns null
* @return the clone if the object implements {@link Cloneable} otherwise the object itself
* @throws CloneFailedException if the object is cloneable and the clone operation fails
* @since 3.0
*/"

