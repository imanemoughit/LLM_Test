description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: reflectionHashCode
Description: /*** <p>
* This method uses reflection to build a valid hash code.
* </p>
*
* <p>
* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is
* also not as efficient as testing explicitly.
* </p>
*
* <p>
* Transient members will be not be used, as they are likely derived fields, and not part of the value of the
* <code>Object</code>.
* </p>
*
* <p>
* Static fields will not be tested. Superclass fields will be included.
* </p>
*
* <p>
* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,
* however this is not vital. Prime numbers are preferred, especially for the multiplier.
* </p>
*
* @param initialNonZeroOddNumber
*            a non-zero, odd number used as the initial value
* @param multiplierNonZeroOddNumber
*            a non-zero, odd number used as the multiplier
* @param object
*            the Object to create a <code>hashCode</code> for
* @return int hash code
* @throws IllegalArgumentException
*             if the Object is <code>null</code>
* @throws IllegalArgumentException
*             if the number is zero or even
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: reflectionHashCode
Description: /*** <p>
* This method uses reflection to build a valid hash code.
* </p>
*
* <p>
* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is
* also not as efficient as testing explicitly.
* </p>
*
* <p>
* If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they
* are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.
* </p>
*
* <p>
* Static fields will not be tested. Superclass fields will be included.
* </p>
*
* <p>
* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,
* however this is not vital. Prime numbers are preferred, especially for the multiplier.
* </p>
*
* @param initialNonZeroOddNumber
*            a non-zero, odd number used as the initial value
* @param multiplierNonZeroOddNumber
*            a non-zero, odd number used as the multiplier
* @param object
*            the Object to create a <code>hashCode</code> for
* @param testTransients
*            whether to include transient fields
* @return int hash code
* @throws IllegalArgumentException
*             if the Object is <code>null</code>
* @throws IllegalArgumentException
*             if the number is zero or even
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: reflectionHashCode
Description: /*** <p>
* This method uses reflection to build a valid hash code.
* </p>
*
* <p>
* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is
* also not as efficient as testing explicitly.
* </p>
*
* <p>
* If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they
* are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.
* </p>
*
* <p>
* Static fields will not be included. Superclass fields will be included up to and including the specified
* superclass. A null superclass is treated as java.lang.Object.
* </p>
*
* <p>
* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,
* however this is not vital. Prime numbers are preferred, especially for the multiplier.
* </p>
*
* @param <T>
*            the type of the object involved
* @param initialNonZeroOddNumber
*            a non-zero, odd number used as the initial value
* @param multiplierNonZeroOddNumber
*            a non-zero, odd number used as the multiplier
* @param object
*            the Object to create a <code>hashCode</code> for
* @param testTransients
*            whether to include transient fields
* @param reflectUpToWrite a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class
*            the superclass to reflect up to (inclusive), may be <code>null</code>
* @param excludeFields
*            array of field names to exclude from use in calculation of hash code
* @return int hash code
* @throws IllegalArgumentException
*             if the Object is <code>null</code>
* @throws IllegalArgumentException
*             if the number is zero or even
* @since 2.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: reflectionHashCode
Description: /*** <p>
* This method uses reflection to build a valid hash code.
* </p>
*
* <p>
* This constructor uses two hard coded choices for the constants needed to build a hash code.
* </p>
*
* <p>
* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is
* also not as efficient as testing explicitly.
* </p>
*
* <P>
* If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they
* are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.
* </p>
*
* <p>
* Static fields will not be tested. Superclass fields will be included.
* </p>
*
* @param object
*            the Object to create a <code>hashCode</code> for
* @param testTransients
*            whether to include transient fields
* @return int hash code
* @throws IllegalArgumentException
*             if the object is <code>null</code>
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: reflectionHashCode
Description: /*** <p>
* This method uses reflection to build a valid hash code.
* </p>
*
* <p>
* This constructor uses two hard coded choices for the constants needed to build a hash code.
* </p>
*
* <p>
* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is
* also not as efficient as testing explicitly.
* </p>
*
* <p>
* Transient members will be not be used, as they are likely derived fields, and not part of the value of the
* <code>Object</code>.
* </p>
*
* <p>
* Static fields will not be tested. Superclass fields will be included.
* </p>
*
* @param object
*            the Object to create a <code>hashCode</code> for
* @param excludeFields
*            Collection of String field names to exclude from use in calculation of hash code
* @return int hash code
* @throws IllegalArgumentException
*             if the object is <code>null</code>
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: reflectionHashCode
Description: /*** <p>
* This method uses reflection to build a valid hash code.
* </p>
*
* <p>
* This constructor uses two hard coded choices for the constants needed to build a hash code.
* </p>
*
* <p>
* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is
* also not as efficient as testing explicitly.
* </p>
*
* <p>
* Transient members will be not be used, as they are likely derived fields, and not part of the value of the
* <code>Object</code>.
* </p>
*
* <p>
* Static fields will not be tested. Superclass fields will be included.
* </p>
*
* @param object
*            the Object to create a <code>hashCode</code> for
* @param excludeFields
*            array of field names to exclude from use in calculation of hash code
* @return int hash code
* @throws IllegalArgumentException
*             if the object is <code>null</code>
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>boolean</code>.
* </p>
* <p>
* This adds <code>1</code> when true, and <code>0</code> when false to the <code>hashCode</code>.
* </p>
* <p>
* This is in contrast to the standard <code>java.lang.Boolean.hashCode</code> handling, which computes
* a <code>hashCode</code> value of <code>1231</code> for <code>java.lang.Boolean</code> instances
* that represent <code>true</code> or <code>1237</code> for <code>java.lang.Boolean</code> instances
* that represent <code>false</code>.
* </p>
* <p>
* This is in accordance with the <quote>Effective Java</quote> design.
* </p>
*
* @param value
*            the boolean to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>boolean</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>byte</code>.
* </p>
*
* @param value
*            the byte to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>byte</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>char</code>.
* </p>
*
* @param value
*            the char to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>char</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>double</code>.
* </p>
*
* @param value
*            the double to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>double</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>float</code>.
* </p>
*
* @param value
*            the float to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>float</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for an <code>int</code>.
* </p>
*
* @param value
*            the int to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for an <code>int</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>long</code>.
* </p>
*
* @param value
*            the long to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>long</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for an <code>Object</code>.
* </p>
*
* @param object
*            the Object to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for an <code>Object</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>short</code>.
* </p>
*
* @param value
*            the short to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: append
Description: /*** <p>
* Append a <code>hashCode</code> for a <code>short</code> array.
* </p>
*
* @param array
*            the array to add to the <code>hashCode</code>
* @return this
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: appendSuper
Description: /*** <p>
* Adds the result of super.hashCode() to this builder.
* </p>
*
* @param superHashCode
*            the result of calling <code>super.hashCode()</code>
* @return this HashCodeBuilder, used to chain calls.
* @since 2.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: toHashCode
Description: /*** <p>
* Return the computed <code>hashCode</code>.
* </p>
*
* @return <code>hashCode</code> based on the fields appended
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: build
Description: /*** Returns the computed <code>hashCode</code>.
*
* @return <code>hashCode</code> based on the fields appended
*
* @since 3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: HashCodeBuilder, Method: hashCode
Description: /*** <p>
* The computed <code>hashCode</code> from toHashCode() is returned due to the likelihood
* of bugs in mis-calling toHashCode() and the unlikeliness of it mattering what the hashCode for
* HashCodeBuilder itself is.</p>
*
* @return <code>hashCode</code> based on the fields appended
* @since 2.5
*/"

