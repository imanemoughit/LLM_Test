description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toString
Description: /*** <p>Outputs an array as a String, treating {@code null} as an empty array.</p>
*
* <p>Multi-dimensional arrays are handled correctly, including
* multi-dimensional primitive arrays.</p>
*
* <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
*
* @param array  the array to get a toString for, may be {@code null}
* @return a String representation of the array, '{}' if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toString
Description: /*** <p>Outputs an array as a String handling {@code null}s.</p>
*
* <p>Multi-dimensional arrays are handled correctly, including
* multi-dimensional primitive arrays.</p>
*
* <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
*
* @param array  the array to get a toString for, may be {@code null}
* @param stringIfNull  the String to return if the array is {@code null}
* @return a String representation of the array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: hashCode
Description: /*** <p>Get a hash code for an array handling multi-dimensional arrays correctly.</p>
*
* <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
*
* @param array  the array to get a hash code for, {@code null} returns zero
* @return a hash code for the array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEquals
Description: /*** <p>Compares two arrays, using equals(), handling multi-dimensional arrays
* correctly.</p>
*
* <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
*
* @param array1  the left hand array to compare, may be {@code null}
* @param array2  the right hand array to compare, may be {@code null}
* @return {@code true} if the arrays are equal
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toMap
Description: /*** <p>Converts the given array into a {@link java.util.Map}. Each element of the array
* must be either a {@link java.util.Map.Entry} or an Array, containing at least two
* elements, where the first element is used as key and the second as
* value.</p>
*
* <p>This method can be used to initialize:</p>
* <pre>
* // Create a Map mapping colors.
* Map colorMap = MapUtils.toMap(new String[][] {{
*     {RED, #FF0000},
*     {GREEN, #00FF00},
*     {BLUE, #0000FF}});
* </pre>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  an array whose elements are either a {@link java.util.Map.Entry} or
*  an Array containing at least two elements, may be {@code null}
* @return a {@code Map} that was created from the array
* @throws IllegalArgumentException  if one element of this Array is
*  itself an Array containing less then two elements
* @throws IllegalArgumentException  if the array contains elements other
*  than {@link java.util.Map.Entry} and an Array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toArray
Description: /*** <p>Create a type-safe generic array.</p>
*
* <p>The Java language does not allow an array to be created from a generic type:</p>
*
* <pre>
public static &lt;T&gt; T[] createAnArray(int size) {
return new T[size]; // compiler error here
}
public static &lt;T&gt; T[] createAnArray(int size) {
return (T[])new Object[size]; // Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
ClassCastException at runtime
}
* </pre>
*
* <p>Therefore new arrays of generic types can be created with this method.
* For example, an array of Strings can be created:</p>
*
* <pre>
String[] array = ArrayUtils.toArray(1, 2);
String[] emptyArray = ArrayUtils.&lt;String&gt;toArray();
* </pre>
*
* <p>The method is typically used in scenarios, where the caller itself uses generic types
* that have to be combined into an array.</p>
*
* <p>Note, this method makes only sense to provide arguments of the same type so that the
* compiler can deduce the type of the array itself. While it is possible to select the
* type explicitly like in
* <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))</code>,
* there is no real advantage when compared to
* <code>new Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}</code>.</p>
*
* @param  <T>   the array's element type
* @param  items  the varargs array items, null allowed
* @return the array, not null unless a null array is passed in
* @since  3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Shallow clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>The objects in the array are not cloned, thus there is no special
* handling for multi-dimensional arrays.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param <T> the component type of the array
* @param array  the array to shallow clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  the array to clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  the array to clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  the array to clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  the array to clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  the array to clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  the array to clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  the array to clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: clone
Description: /*** <p>Clones an array returning a typecast result and handling
* {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  the array to clone, may be {@code null}
* @return the cloned array, {@code null} if {@code null} input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: nullToEmpty
Description: /*** <p>Defensive programming technique to change a {@code null}
* reference to an empty one.</p>
*
* <p>This method returns an empty array for a {@code null} input array.</p>
*
* <p>As a memory optimizing technique an empty array passed in will be overridden with
* the empty {@code public static} references in this class.</p>
*
* @param array  the array to check for {@code null} or empty
* @return the same array, {@code public static} empty array if {@code null} or empty input
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new array containing the elements between
* the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* <p>The component type of the subarray is always the same as
* that of the input array. Thus, if the input is an array of type
* {@code Date}, the following usage is envisaged:</p>
*
* <pre>
* Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);
* </pre>
*
* @param <T> the component type of the array
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new {@code long} array containing the elements
* between the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new {@code int} array containing the elements
* between the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new {@code short} array containing the elements
* between the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new {@code char} array containing the elements
* between the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new {@code byte} array containing the elements
* between the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new {@code double} array containing the elements
* between the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new {@code float} array containing the elements
* between the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: subarray
Description: /*** <p>Produces a new {@code boolean} array containing the elements
* between the start and end indices.</p>
*
* <p>The start index is inclusive, the end index exclusive.
* Null array input produces null output.</p>
*
* @param array  the array
* @param startIndexInclusive  the starting index. Undervalue (&lt;0)
*      is promoted to 0, overvalue (&gt;array.length) results
*      in an empty array.
* @param endIndexExclusive  elements up to endIndex-1 are present in the
*      returned subarray. Undervalue (&lt; startIndex) produces
*      empty array, overvalue (&gt;array.length) is demoted to
*      array length.
* @return a new array containing the elements between
*      the start and end indices.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.
*
* <p>Any multi-dimensional aspects of the arrays are ignored.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameLength
Description: /*** <p>Checks whether two arrays are the same length, treating
* {@code null} arrays as length {@code 0}.</p>
*
* @param array1 the first array, may be {@code null}
* @param array2 the second array, may be {@code null}
* @return {@code true} if length of arrays matches, treating
*  {@code null} as an empty array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: getLength
Description: /*** <p>Returns the length of the specified array.
* This method can deal with {@code Object} arrays and with primitive arrays.</p>
*
* <p>If the input array is {@code null}, {@code 0} is returned.</p>
*
* <pre>
* ArrayUtils.getLength(null)            = 0
* ArrayUtils.getLength([])              = 0
* ArrayUtils.getLength([null])          = 1
* ArrayUtils.getLength([true, false])   = 2
* ArrayUtils.getLength([1, 2, 3])       = 3
* ArrayUtils.getLength([a, b, c]) = 3
* </pre>
*
* @param array  the array to retrieve the length from, may be null
* @return The length of the array, or {@code 0} if the array is {@code null}
* @throws IllegalArgumentException if the object argument is not an array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isSameType
Description: /*** <p>Checks whether two arrays are the same type taking into account
* multi-dimensional arrays.</p>
*
* @param array1 the first array, must not be {@code null}
* @param array2 the second array, must not be {@code null}
* @return {@code true} if type of arrays matches
* @throws IllegalArgumentException if either array is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>There is no special handling for multi-dimensional arrays.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: reverse
Description: /*** <p>Reverses the order of the given array.</p>
*
* <p>This method does nothing for a {@code null} input array.</p>
*
* @param array  the array to reverse, may be {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given object in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param objectToFind  the object to find, may be {@code null}
* @return the index of the object within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given object in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param objectToFind  the object to find, may be {@code null}
* @param startIndex  the index to start searching at
* @return the index of the object within the array starting at the index,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given object within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param objectToFind  the object to find, may be {@code null}
* @return the last index of the object within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given object in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than
* the array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param objectToFind  the object to find, may be {@code null}
* @param startIndex  the start index to travers backwards from
* @return the last index of the object within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the object is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param objectToFind  the object to find
* @return {@code true} if the array contains the object
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param valueToFind  the object to find
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the
* array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the value is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param valueToFind  the value to find
* @return {@code true} if the array contains the object
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param valueToFind  the object to find
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the
* array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the value is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param valueToFind  the value to find
* @return {@code true} if the array contains the object
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param valueToFind  the object to find
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the
* array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the value is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param valueToFind  the value to find
* @return {@code true} if the array contains the object
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param valueToFind  the object to find
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the
* array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the value is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param valueToFind  the value to find
* @return {@code true} if the array contains the object
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param valueToFind  the object to find
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the
* array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the value is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param valueToFind  the value to find
* @return {@code true} if the array contains the object
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value within a given tolerance in the array.
* This method will return the index of the first value which falls between the region
* defined by valueToFind - tolerance and valueToFind + tolerance.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param tolerance tolerance of the search
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.
* This method will return the index of the first value which falls between the region
* defined by valueToFind - tolerance and valueToFind + tolerance.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @param tolerance tolerance of the search
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param valueToFind  the object to find
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within a given tolerance in the array.
* This method will return the index of the last value which falls between the region
* defined by valueToFind - tolerance and valueToFind + tolerance.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param tolerance tolerance of the search
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the
* array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.
* This method will return the index of the last value which falls between the region
* defined by valueToFind - tolerance and valueToFind + tolerance.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the
* array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @param tolerance  search for value within plus/minus this amount
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the value is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param valueToFind  the value to find
* @return {@code true} if the array contains the object
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if a value falling within the given tolerance is in the
* given array.  If the array contains a value within the inclusive range
* defined by (value - tolerance) to (value + tolerance).</p>
*
* <p>The method returns {@code false} if a {@code null} array
* is passed in.</p>
*
* @param array  the array to search
* @param valueToFind  the value to find
* @param tolerance  the array contains the tolerance of the search
* @return true if value falling within tolerance is in array
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param valueToFind  the object to find
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the
* array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the value is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param valueToFind  the value to find
* @return {@code true} if the array contains the object
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: indexOf
Description: /*** <p>Finds the index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex is treated as zero. A startIndex larger than the array
* length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
*
* @param array  the array to search through for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the index to start searching at
* @return the index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null}
*  array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value within the array.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) if
* {@code null} array input.</p>
*
* @param array  the array to travers backwords looking for the object, may be {@code null}
* @param valueToFind  the object to find
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: lastIndexOf
Description: /*** <p>Finds the last index of the given value in the array starting at the given index.</p>
*
* <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>
*
* <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than
* the array length will search from the end of the array.</p>
*
* @param array  the array to traverse for looking for the object, may be {@code null}
* @param valueToFind  the value to find
* @param startIndex  the start index to travers backwards from
* @return the last index of the value within the array,
*  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: contains
Description: /*** <p>Checks if the value is in the given array.</p>
*
* <p>The method returns {@code false} if a {@code null} array is passed in.</p>
*
* @param array  the array to search through
* @param valueToFind  the value to find
* @return {@code true} if the array contains the object
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Characters to primitives.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Character} array, may be {@code null}
* @return a {@code char} array, {@code null} if null array input
* @throws NullPointerException if array content is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Character to primitives handling {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Character} array, may be {@code null}
* @param valueForNull  the value to insert if {@code null} found
* @return a {@code char} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toObject
Description: /*** <p>Converts an array of primitive chars to objects.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array a {@code char} array
* @return a {@code Character} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Longs to primitives.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Long} array, may be {@code null}
* @return a {@code long} array, {@code null} if null array input
* @throws NullPointerException if array content is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Long to primitives handling {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Long} array, may be {@code null}
* @param valueForNull  the value to insert if {@code null} found
* @return a {@code long} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toObject
Description: /*** <p>Converts an array of primitive longs to objects.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code long} array
* @return a {@code Long} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Integers to primitives.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Integer} array, may be {@code null}
* @return an {@code int} array, {@code null} if null array input
* @throws NullPointerException if array content is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Integer to primitives handling {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Integer} array, may be {@code null}
* @param valueForNull  the value to insert if {@code null} found
* @return an {@code int} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toObject
Description: /*** <p>Converts an array of primitive ints to objects.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  an {@code int} array
* @return an {@code Integer} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Shorts to primitives.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Short} array, may be {@code null}
* @return a {@code byte} array, {@code null} if null array input
* @throws NullPointerException if array content is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Short to primitives handling {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Short} array, may be {@code null}
* @param valueForNull  the value to insert if {@code null} found
* @return a {@code byte} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toObject
Description: /*** <p>Converts an array of primitive shorts to objects.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code short} array
* @return a {@code Short} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Bytes to primitives.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Byte} array, may be {@code null}
* @return a {@code byte} array, {@code null} if null array input
* @throws NullPointerException if array content is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Bytes to primitives handling {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Byte} array, may be {@code null}
* @param valueForNull  the value to insert if {@code null} found
* @return a {@code byte} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toObject
Description: /*** <p>Converts an array of primitive bytes to objects.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code byte} array
* @return a {@code Byte} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Doubles to primitives.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Double} array, may be {@code null}
* @return a {@code double} array, {@code null} if null array input
* @throws NullPointerException if array content is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Doubles to primitives handling {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Double} array, may be {@code null}
* @param valueForNull  the value to insert if {@code null} found
* @return a {@code double} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toObject
Description: /*** <p>Converts an array of primitive doubles to objects.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code double} array
* @return a {@code Double} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Floats to primitives.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Float} array, may be {@code null}
* @return a {@code float} array, {@code null} if null array input
* @throws NullPointerException if array content is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Floats to primitives handling {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Float} array, may be {@code null}
* @param valueForNull  the value to insert if {@code null} found
* @return a {@code float} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toObject
Description: /*** <p>Converts an array of primitive floats to objects.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code float} array
* @return a {@code Float} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Booleans to primitives.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Boolean} array, may be {@code null}
* @return a {@code boolean} array, {@code null} if null array input
* @throws NullPointerException if array content is {@code null}
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toPrimitive
Description: /*** <p>Converts an array of object Booleans to primitives handling {@code null}.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code Boolean} array, may be {@code null}
* @param valueForNull  the value to insert if {@code null} found
* @return a {@code boolean} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: toObject
Description: /*** <p>Converts an array of primitive booleans to objects.</p>
*
* <p>This method returns {@code null} for a {@code null} input array.</p>
*
* @param array  a {@code boolean} array
* @return a {@code Boolean} array, {@code null} if null array input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of Objects is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of primitive longs is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of primitive ints is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of primitive shorts is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of primitive chars is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of primitive bytes is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of primitive doubles is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of primitive floats is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isEmpty
Description: /*** <p>Checks if an array of primitive booleans is empty or {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is empty or {@code null}
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of Objects is not empty or not {@code null}.</p>
*
* @param <T> the component type of the array
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of primitive longs is not empty or not {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of primitive ints is not empty or not {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of primitive shorts is not empty or not {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of primitive chars is not empty or not {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of primitive bytes is not empty or not {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of primitive doubles is not empty or not {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of primitive floats is not empty or not {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: isNotEmpty
Description: /*** <p>Checks if an array of primitive booleans is not empty or not {@code null}.</p>
*
* @param array  the array to test
* @return {@code true} if the array is not empty or not {@code null}
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(null, null)     = null
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* ArrayUtils.addAll([null], [null]) = [null, null]
* ArrayUtils.addAll([a, b, c], [1, 2, 3]) = [a, b, c, 1, 2, 3]
* </pre>
*
* @param <T> the component type of the array
* @param array1  the first array whose elements are added to the new array, may be {@code null}
* @param array2  the second array whose elements are added to the new array, may be {@code null}
* @return The new array, {@code null} if both arrays are {@code null}.
*      The type of the new array is the type of the first array,
*      unless the first array is null, in which case the type is the same as the second array.
* @since 2.1
* @throws IllegalArgumentException if the array types are incompatible
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* </pre>
*
* @param array1  the first array whose elements are added to the new array.
* @param array2  the second array whose elements are added to the new array.
* @return The new boolean[] array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* </pre>
*
* @param array1  the first array whose elements are added to the new array.
* @param array2  the second array whose elements are added to the new array.
* @return The new char[] array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* </pre>
*
* @param array1  the first array whose elements are added to the new array.
* @param array2  the second array whose elements are added to the new array.
* @return The new byte[] array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* </pre>
*
* @param array1  the first array whose elements are added to the new array.
* @param array2  the second array whose elements are added to the new array.
* @return The new short[] array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* </pre>
*
* @param array1  the first array whose elements are added to the new array.
* @param array2  the second array whose elements are added to the new array.
* @return The new int[] array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* </pre>
*
* @param array1  the first array whose elements are added to the new array.
* @param array2  the second array whose elements are added to the new array.
* @return The new long[] array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* </pre>
*
* @param array1  the first array whose elements are added to the new array.
* @param array2  the second array whose elements are added to the new array.
* @return The new float[] array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: addAll
Description: /*** <p>Adds all the elements of the given arrays into a new array.</p>
* <p>The new array contains all of the element of {@code array1} followed
* by all of the elements {@code array2}. When an array is returned, it is always
* a new array.</p>
*
* <pre>
* ArrayUtils.addAll(array1, null)   = cloned copy of array1
* ArrayUtils.addAll(null, array2)   = cloned copy of array2
* ArrayUtils.addAll([], [])         = []
* </pre>
*
* @param array1  the first array whose elements are added to the new array.
* @param array2  the second array whose elements are added to the new array.
* @return The new double[] array.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element, unless the element itself is null,
*  in which case the return type is Object[]</p>
*
* <pre>
* ArrayUtils.add(null, null)      = [null]
* ArrayUtils.add(null, a)       = [a]
* ArrayUtils.add([a], null)     = [a, null]
* ArrayUtils.add([a], b)      = [a, b]
* ArrayUtils.add([a, b], c) = [a, b, c]
* </pre>
*
* @param <T> the component type of the array
* @param array  the array to add the element to, may be {@code null}
* @param element  the object to add, may be {@code null}
* @return A new array containing the existing elements plus the new element
* The returned array type will be that of the input array (unless null),
* in which case it will have the same type as the element.
* If both are null, an IllegalArgumentException is thrown
* @since 2.1
* @throws IllegalArgumentException if both arguments are null
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, true)          = [true]
* ArrayUtils.add([true], false)       = [true, false]
* ArrayUtils.add([true, false], true) = [true, false, true]
* </pre>
*
* @param array  the array to copy and add the element to, may be {@code null}
* @param element  the object to add at the last index of the new array
* @return A new array containing the existing elements plus the new element
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0)   = [0]
* ArrayUtils.add([1], 0)    = [1, 0]
* ArrayUtils.add([1, 0], 1) = [1, 0, 1]
* </pre>
*
* @param array  the array to copy and add the element to, may be {@code null}
* @param element  the object to add at the last index of the new array
* @return A new array containing the existing elements plus the new element
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, '0')       = ['0']
* ArrayUtils.add(['1'], '0')      = ['1', '0']
* ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1']
* </pre>
*
* @param array  the array to copy and add the element to, may be {@code null}
* @param element  the object to add at the last index of the new array
* @return A new array containing the existing elements plus the new element
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0)   = [0]
* ArrayUtils.add([1], 0)    = [1, 0]
* ArrayUtils.add([1, 0], 1) = [1, 0, 1]
* </pre>
*
* @param array  the array to copy and add the element to, may be {@code null}
* @param element  the object to add at the last index of the new array
* @return A new array containing the existing elements plus the new element
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0)   = [0]
* ArrayUtils.add([1], 0)    = [1, 0]
* ArrayUtils.add([1, 0], 1) = [1, 0, 1]
* </pre>
*
* @param array  the array to copy and add the element to, may be {@code null}
* @param element  the object to add at the last index of the new array
* @return A new array containing the existing elements plus the new element
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0)   = [0]
* ArrayUtils.add([1], 0)    = [1, 0]
* ArrayUtils.add([1, 0], 1) = [1, 0, 1]
* </pre>
*
* @param array  the array to copy and add the element to, may be {@code null}
* @param element  the object to add at the last index of the new array
* @return A new array containing the existing elements plus the new element
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0)   = [0]
* ArrayUtils.add([1], 0)    = [1, 0]
* ArrayUtils.add([1, 0], 1) = [1, 0, 1]
* </pre>
*
* @param array  the array to copy and add the element to, may be {@code null}
* @param element  the object to add at the last index of the new array
* @return A new array containing the existing elements plus the new element
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Copies the given array and adds the given element at the end of the new array.</p>
*
* <p>The new array contains the same elements of the input
* array plus the given element in the last position. The component type of
* the new array is the same as that of the input array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0)   = [0]
* ArrayUtils.add([1], 0)    = [1, 0]
* ArrayUtils.add([1, 0], 1) = [1, 0, 1]
* </pre>
*
* @param array  the array to copy and add the element to, may be {@code null}
* @param element  the object to add at the last index of the new array
* @return A new array containing the existing elements plus the new element
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0, null)      = [null]
* ArrayUtils.add(null, 0, a)       = [a]
* ArrayUtils.add([a], 1, null)     = [a, null]
* ArrayUtils.add([a], 1, b)      = [a, b]
* ArrayUtils.add([a, b], 3, c) = [a, b, c]
* </pre>
*
* @param <T> the component type of the array
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
* @throws IllegalArgumentException if both array and element are null
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0, true)          = [true]
* ArrayUtils.add([true], 0, false)       = [false, true]
* ArrayUtils.add([false], 1, true)       = [false, true]
* ArrayUtils.add([true, false], 1, true) = [true, true, false]
* </pre>
*
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add(null, 0, 'a')            = ['a']
* ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a']
* ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b']
* ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b']
* ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']
* </pre>
*
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add([1], 0, 2)         = [2, 1]
* ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3]
* ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6]
* ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
* </pre>
*
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add([1], 0, 2)         = [2, 1]
* ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]
* ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]
* ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
* </pre>
*
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add([1], 0, 2)         = [2, 1]
* ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]
* ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]
* ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
* </pre>
*
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add([1L], 0, 2L)           = [2L, 1L]
* ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L]
* ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L]
* ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]
* </pre>
*
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f]
* ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f]
* ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f]
* ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]
* </pre>
*
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: add
Description: /*** <p>Inserts the specified element at the specified position in the array.
* Shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array plus the given element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, a new one element array is returned
*  whose component type is the same as the element.</p>
*
* <pre>
* ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1]
* ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5]
* ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7]
* ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]
* </pre>
*
* @param array  the array to add the element to, may be {@code null}
* @param index  the position of the new object
* @param element  the object to add
* @return A new array containing the existing elements and the new element
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index > array.length).
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove([a], 0)           = []
* ArrayUtils.remove([a, b], 0)      = [b]
* ArrayUtils.remove([a, b], 1)      = [a]
* ArrayUtils.remove([a, b, c], 1) = [a, c]
* </pre>
*
* @param <T> the component type of the array
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, a)            = null
* ArrayUtils.removeElement([], a)              = []
* ArrayUtils.removeElement([a], b)           = [a]
* ArrayUtils.removeElement([a, b], a)      = [b]
* ArrayUtils.removeElement([a, b, a], a) = [b, a]
* </pre>
*
* @param <T> the component type of the array
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove([true], 0)              = []
* ArrayUtils.remove([true, false], 0)       = [false]
* ArrayUtils.remove([true, false], 1)       = [true]
* ArrayUtils.remove([true, true, false], 1) = [true, false]
* </pre>
*
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, true)                = null
* ArrayUtils.removeElement([], true)                  = []
* ArrayUtils.removeElement([true], false)             = [true]
* ArrayUtils.removeElement([true, false], false)      = [true]
* ArrayUtils.removeElement([true, false, true], true) = [false, true]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove([1], 0)          = []
* ArrayUtils.remove([1, 0], 0)       = [0]
* ArrayUtils.remove([1, 0], 1)       = [1]
* ArrayUtils.remove([1, 0, 1], 1)    = [1, 1]
* </pre>
*
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, 1)        = null
* ArrayUtils.removeElement([], 1)          = []
* ArrayUtils.removeElement([1], 0)         = [1]
* ArrayUtils.removeElement([1, 0], 0)      = [1]
* ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove(['a'], 0)           = []
* ArrayUtils.remove(['a', 'b'], 0)      = ['b']
* ArrayUtils.remove(['a', 'b'], 1)      = ['a']
* ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c']
* </pre>
*
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, 'a')            = null
* ArrayUtils.removeElement([], 'a')              = []
* ArrayUtils.removeElement(['a'], 'b')           = ['a']
* ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b']
* ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a']
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove([1.1], 0)           = []
* ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]
* ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]
* ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
* </pre>
*
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, 1.1)            = null
* ArrayUtils.removeElement([], 1.1)              = []
* ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
* ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
* ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove([1.1], 0)           = []
* ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]
* ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]
* ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
* </pre>
*
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, 1.1)            = null
* ArrayUtils.removeElement([], 1.1)              = []
* ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
* ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
* ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove([1], 0)         = []
* ArrayUtils.remove([2, 6], 0)      = [6]
* ArrayUtils.remove([2, 6], 1)      = [2]
* ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
* </pre>
*
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, 1)      = null
* ArrayUtils.removeElement([], 1)        = []
* ArrayUtils.removeElement([1], 2)       = [1]
* ArrayUtils.removeElement([1, 3], 1)    = [3]
* ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove([1], 0)         = []
* ArrayUtils.remove([2, 6], 0)      = [6]
* ArrayUtils.remove([2, 6], 1)      = [2]
* ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
* </pre>
*
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, 1)      = null
* ArrayUtils.removeElement([], 1)        = []
* ArrayUtils.removeElement([1], 2)       = [1]
* ArrayUtils.removeElement([1, 3], 1)    = [3]
* ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: remove
Description: /*** <p>Removes the element at the specified position from the specified array.
* All subsequent elements are shifted to the left (subtracts one from
* their indices).</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the element on the specified position. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.remove([1], 0)         = []
* ArrayUtils.remove([2, 6], 0)      = [6]
* ArrayUtils.remove([2, 6], 1)      = [2]
* ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
* </pre>
*
* @param array  the array to remove the element from, may not be {@code null}
* @param index  the position of the element to be removed
* @return A new array containing the existing elements except the element
*         at the specified position.
* @throws IndexOutOfBoundsException if the index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElement
Description: /*** <p>Removes the first occurrence of the specified element from the
* specified array. All subsequent elements are shifted to the left
* (subtracts one from their indices). If the array doesn't contains
* such an element, no elements are removed from the array.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except the first occurrence of the specified element. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <pre>
* ArrayUtils.removeElement(null, 1)      = null
* ArrayUtils.removeElement([], 1)        = []
* ArrayUtils.removeElement([1], 2)       = [1]
* ArrayUtils.removeElement([1, 3], 1)    = [3]
* ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param element  the element to be removed
* @return A new array containing the existing elements except the first
*         occurrence of the specified element.
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([a, b, c], 0, 2) = [b]
* ArrayUtils.removeAll([a, b, c], 1, 2) = [a]
* </pre>
*
* @param <T> the component type of the array
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, a, b)            = null
* ArrayUtils.removeElements([], a, b)              = []
* ArrayUtils.removeElements([a], b, c)           = [a]
* ArrayUtils.removeElements([a, b], a, c)      = [b]
* ArrayUtils.removeElements([a, b, a], a)      = [b, a]
* ArrayUtils.removeElements([a, b, a], a, a) = [b]
* </pre>
*
* @param <T> the component type of the array
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([1], 0)             = []
* ArrayUtils.removeAll([2, 6], 0)          = [6]
* ArrayUtils.removeAll([2, 6], 0, 1)       = []
* ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2]
* ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6]
* ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = []
* </pre>
*
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, 1, 2)      = null
* ArrayUtils.removeElements([], 1, 2)        = []
* ArrayUtils.removeElements([1], 2, 3)       = [1]
* ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
* ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
* ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([1], 0)             = []
* ArrayUtils.removeAll([2, 6], 0)          = [6]
* ArrayUtils.removeAll([2, 6], 0, 1)       = []
* ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2]
* ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6]
* ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = []
* </pre>
*
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, 1, 2)      = null
* ArrayUtils.removeElements([], 1, 2)        = []
* ArrayUtils.removeElements([1], 2, 3)       = [1]
* ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
* ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
* ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([1], 0)             = []
* ArrayUtils.removeAll([2, 6], 0)          = [6]
* ArrayUtils.removeAll([2, 6], 0, 1)       = []
* ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2]
* ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6]
* ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = []
* </pre>
*
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, 1, 2)      = null
* ArrayUtils.removeElements([], 1, 2)        = []
* ArrayUtils.removeElements([1], 2, 3)       = [1]
* ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
* ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
* ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([1], 0)             = []
* ArrayUtils.removeAll([2, 6], 0)          = [6]
* ArrayUtils.removeAll([2, 6], 0, 1)       = []
* ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2]
* ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6]
* ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = []
* </pre>
*
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, 1, 2)      = null
* ArrayUtils.removeElements([], 1, 2)        = []
* ArrayUtils.removeElements([1], 2, 3)       = [1]
* ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
* ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
* ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([1], 0)             = []
* ArrayUtils.removeAll([2, 6], 0)          = [6]
* ArrayUtils.removeAll([2, 6], 0, 1)       = []
* ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2]
* ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6]
* ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = []
* </pre>
*
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, 1, 2)      = null
* ArrayUtils.removeElements([], 1, 2)        = []
* ArrayUtils.removeElements([1], 2, 3)       = [1]
* ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
* ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
* ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([1], 0)             = []
* ArrayUtils.removeAll([2, 6], 0)          = [6]
* ArrayUtils.removeAll([2, 6], 0, 1)       = []
* ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2]
* ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6]
* ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = []
* </pre>
*
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, 1, 2)      = null
* ArrayUtils.removeElements([], 1, 2)        = []
* ArrayUtils.removeElements([1], 2, 3)       = [1]
* ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
* ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
* ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([1], 0)             = []
* ArrayUtils.removeAll([2, 6], 0)          = [6]
* ArrayUtils.removeAll([2, 6], 0, 1)       = []
* ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2]
* ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6]
* ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = []
* </pre>
*
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, 1, 2)      = null
* ArrayUtils.removeElements([], 1, 2)        = []
* ArrayUtils.removeElements([1], 2, 3)       = [1]
* ArrayUtils.removeElements([1, 3], 1, 2)    = [3]
* ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1]
* ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeAll
Description: /*** <p>Removes the elements at the specified positions from the specified array.
* All remaining elements are shifted to the left.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except those at the specified positions. The component
* type of the returned array is always the same as that of the input
* array.</p>
*
* <p>If the input array is {@code null}, an IndexOutOfBoundsException
* will be thrown, because in that case no valid index can be specified.</p>
*
* <pre>
* ArrayUtils.removeAll([true, false, true], 0, 2) = [false]
* ArrayUtils.removeAll([true, false, true], 1, 2) = [true]
* </pre>
*
* @param array   the array to remove the element from, may not be {@code null}
* @param indices the positions of the elements to be removed
* @return A new array containing the existing elements except those
*         at the specified positions.
* @throws IndexOutOfBoundsException if any index is out of range
* (index < 0 || index >= array.length), or if the array is {@code null}.
* @since 3.0.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: ArrayUtils, Method: removeElements
Description: /*** <p>Removes occurrences of specified elements, in specified quantities,
* from the specified array. All subsequent elements are shifted left.
* For any element-to-be-removed specified in greater quantities than
* contained in the original array, no change occurs beyond the
* removal of the existing matching items.</p>
*
* <p>This method returns a new array with the same elements of the input
* array except for the earliest-encountered occurrences of the specified
* elements. The component type of the returned array is always the same
* as that of the input array.</p>
*
* <pre>
* ArrayUtils.removeElements(null, true, false)               = null
* ArrayUtils.removeElements([], true, false)                 = []
* ArrayUtils.removeElements([true], false, false)            = [true]
* ArrayUtils.removeElements([true, false], true, true)       = [false]
* ArrayUtils.removeElements([true, false, true], true)       = [false, true]
* ArrayUtils.removeElements([true, false, true], true, true) = [false]
* </pre>
*
* @param array  the array to remove the element from, may be {@code null}
* @param values the elements to be removed
* @return A new array containing the existing elements except the
*         earliest-encountered occurrences of the specified elements.
* @since 3.0.1
*/"

