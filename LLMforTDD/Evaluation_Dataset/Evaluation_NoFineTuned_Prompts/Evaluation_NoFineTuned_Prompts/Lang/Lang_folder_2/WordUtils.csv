description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: wrap
Description: /*** <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>
*
* <p>New lines will be separated by the system property line separator.
* Very long words, such as URLs will <i>not</i> be wrapped.</p>
*
* <p>Leading spaces on a new line are stripped.
* Trailing spaces are not stripped.</p>
*
* <pre>
* WordUtils.wrap(null, *) = null
* WordUtils.wrap(, *) = 
* </pre>
*
* @param str  the String to be word wrapped, may be null
* @param wrapLength  the column to wrap the words at, less than 1 is treated as 1
* @return a line with newlines inserted, <code>null</code> if null input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: wrap
Description: /*** <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>
*
* <p>Leading spaces on a new line are stripped.
* Trailing spaces are not stripped.</p>
*
* <pre>
* WordUtils.wrap(null, *, *, *) = null
* WordUtils.wrap(, *, *, *) = 
* </pre>
*
* @param str  the String to be word wrapped, may be null
* @param wrapLength  the column to wrap the words at, less than 1 is treated as 1
* @param newLineStr  the string to insert for a new line,
*  <code>null</code> uses the system property line separator
* @param wrapLongWords  true if long words (such as URLs) should be wrapped
* @return a line with newlines inserted, <code>null</code> if null input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: capitalize
Description: /*** <p>Capitalizes all the whitespace separated words in a String.
* Only the first letter of each word is changed. To convert the
* rest of each word to lowercase at the same time,
* use {@link #capitalizeFully(String)}.</p>
*
* <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
* A <code>null</code> input String returns <code>null</code>.
* Capitalization uses the Unicode title case, normally equivalent to
* upper case.</p>
*
* <pre>
* WordUtils.capitalize(null)        = null
* WordUtils.capitalize()          = 
* WordUtils.capitalize(i am FINE) = I Am FINE
* </pre>
*
* @param str  the String to capitalize, may be null
* @return capitalized String, <code>null</code> if null String input
* @see #uncapitalize(String)
* @see #capitalizeFully(String)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: capitalize
Description: /*** <p>Capitalizes all the delimiter separated words in a String.
* Only the first letter of each word is changed. To convert the
* rest of each word to lowercase at the same time,
* use {@link #capitalizeFully(String, char[])}.</p>
*
* <p>The delimiters represent a set of characters understood to separate words.
* The first string character and the first non-delimiter character after a
* delimiter will be capitalized. </p>
*
* <p>A <code>null</code> input String returns <code>null</code>.
* Capitalization uses the Unicode title case, normally equivalent to
* upper case.</p>
*
* <pre>
* WordUtils.capitalize(null, *)            = null
* WordUtils.capitalize(, *)              = 
* WordUtils.capitalize(*, new char[0])     = *
* WordUtils.capitalize(i am fine, null)  = I Am Fine
* WordUtils.capitalize(i aM.fine, {'.'}) = I aM.Fine
* </pre>
*
* @param str  the String to capitalize, may be null
* @param delimiters  set of characters to determine capitalization, null means whitespace
* @return capitalized String, <code>null</code> if null String input
* @see #uncapitalize(String)
* @see #capitalizeFully(String)
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: capitalizeFully
Description: /*** <p>Converts all the whitespace separated words in a String into capitalized words,
* that is each word is made up of a titlecase character and then a series of
* lowercase characters.  </p>
*
* <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
* A <code>null</code> input String returns <code>null</code>.
* Capitalization uses the Unicode title case, normally equivalent to
* upper case.</p>
*
* <pre>
* WordUtils.capitalizeFully(null)        = null
* WordUtils.capitalizeFully()          = 
* WordUtils.capitalizeFully(i am FINE) = I Am Fine
* </pre>
*
* @param str  the String to capitalize, may be null
* @return capitalized String, <code>null</code> if null String input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: capitalizeFully
Description: /*** <p>Converts all the delimiter separated words in a String into capitalized words,
* that is each word is made up of a titlecase character and then a series of
* lowercase characters. </p>
*
* <p>The delimiters represent a set of characters understood to separate words.
* The first string character and the first non-delimiter character after a
* delimiter will be capitalized. </p>
*
* <p>A <code>null</code> input String returns <code>null</code>.
* Capitalization uses the Unicode title case, normally equivalent to
* upper case.</p>
*
* <pre>
* WordUtils.capitalizeFully(null, *)            = null
* WordUtils.capitalizeFully(, *)              = 
* WordUtils.capitalizeFully(*, null)            = *
* WordUtils.capitalizeFully(*, new char[0])     = *
* WordUtils.capitalizeFully(i aM.fine, {'.'}) = I am.Fine
* </pre>
*
* @param str  the String to capitalize, may be null
* @param delimiters  set of characters to determine capitalization, null means whitespace
* @return capitalized String, <code>null</code> if null String input
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: uncapitalize
Description: /*** <p>Uncapitalizes all the whitespace separated words in a String.
* Only the first letter of each word is changed.</p>
*
* <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
* A <code>null</code> input String returns <code>null</code>.</p>
*
* <pre>
* WordUtils.uncapitalize(null)        = null
* WordUtils.uncapitalize()          = 
* WordUtils.uncapitalize(I Am FINE) = i am fINE
* </pre>
*
* @param str  the String to uncapitalize, may be null
* @return uncapitalized String, <code>null</code> if null String input
* @see #capitalize(String)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: uncapitalize
Description: /*** <p>Uncapitalizes all the whitespace separated words in a String.
* Only the first letter of each word is changed.</p>
*
* <p>The delimiters represent a set of characters understood to separate words.
* The first string character and the first non-delimiter character after a
* delimiter will be uncapitalized. </p>
*
* <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
* A <code>null</code> input String returns <code>null</code>.</p>
*
* <pre>
* WordUtils.uncapitalize(null, *)            = null
* WordUtils.uncapitalize(, *)              = 
* WordUtils.uncapitalize(*, null)            = *
* WordUtils.uncapitalize(*, new char[0])     = *
* WordUtils.uncapitalize(I AM.FINE, {'.'}) = i AM.fINE
* </pre>
*
* @param str  the String to uncapitalize, may be null
* @param delimiters  set of characters to determine uncapitalization, null means whitespace
* @return uncapitalized String, <code>null</code> if null String input
* @see #capitalize(String)
* @since 2.1
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: swapCase
Description: /*** <p>Swaps the case of a String using a word based algorithm.</p>
*
* <ul>
*  <li>Upper case character converts to Lower case</li>
*  <li>Title case character converts to Lower case</li>
*  <li>Lower case character after Whitespace or at start converts to Title case</li>
*  <li>Other Lower case character converts to Upper case</li>
* </ul>
*
* <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
* A <code>null</code> input String returns <code>null</code>.</p>
*
* <pre>
* StringUtils.swapCase(null)                 = null
* StringUtils.swapCase()                   = 
* StringUtils.swapCase(The dog has a BONE) = tHE DOG HAS A bone
* </pre>
*
* @param str  the String to swap case, may be null
* @return the changed String, <code>null</code> if null String input
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: initials
Description: /*** <p>Extracts the initial letters from each word in the String.</p>
*
* <p>The first letter of the string and all first letters after
* whitespace are returned as a new string.
* Their case is not changed.</p>
*
* <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
* A <code>null</code> input String returns <code>null</code>.</p>
*
* <pre>
* WordUtils.initials(null)             = null
* WordUtils.initials()               = 
* WordUtils.initials(Ben John Lee)   = BJL
* WordUtils.initials(Ben J.Lee)      = BJ
* </pre>
*
* @param str  the String to get initials from, may be null
* @return String of initial letters, <code>null</code> if null String input
* @see #initials(String,char[])
* @since 2.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: WordUtils, Method: initials
Description: /*** <p>Extracts the initial letters from each word in the String.</p>
*
* <p>The first letter of the string and all first letters after the
* defined delimiters are returned as a new string.
* Their case is not changed.</p>
*
* <p>If the delimiters array is null, then Whitespace is used.
* Whitespace is defined by {@link Character#isWhitespace(char)}.
* A <code>null</code> input String returns <code>null</code>.
* An empty delimiter array returns an empty String.</p>
*
* <pre>
* WordUtils.initials(null, *)                = null
* WordUtils.initials(, *)                  = 
* WordUtils.initials(Ben John Lee, null)   = BJL
* WordUtils.initials(Ben J.Lee, null)      = BJ
* WordUtils.initials(Ben J.Lee, [' ','.']) = BJL
* WordUtils.initials(*, new char[0])         = 
* </pre>
*
* @param str  the String to get initials from, may be null
* @param delimiters  set of characters to determine words, null means whitespace
* @return String of initial letters, <code>null</code> if null String input
* @see #initials(String)
* @since 2.2
*/"

