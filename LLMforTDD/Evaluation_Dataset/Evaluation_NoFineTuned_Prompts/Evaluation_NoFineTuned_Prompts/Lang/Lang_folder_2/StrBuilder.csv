description
Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: getNewLineText
Description: /*** Gets the text to be appended when a new line is added.
*
* @return the new line text, null means use system default
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: setNewLineText
Description: /*** Sets the text to be appended when a new line is added.
*
* @param newLine  the new line text, null means use system default
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: getNullText
Description: /*** Gets the text to be appended when null is added.
*
* @return the null text, null means no append
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: setNullText
Description: /*** Sets the text to be appended when null is added.
*
* @param nullText  the null text, null means no append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: length
Description: /*** Gets the length of the string builder.
*
* @return the length
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: setLength
Description: /*** Updates the length of the builder by either dropping the last characters
* or adding filler of Unicode zero.
*
* @param length  the length to set to, must be zero or positive
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the length is negative
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: capacity
Description: /*** Gets the current size of the internal character array buffer.
*
* @return the capacity
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: ensureCapacity
Description: /*** Checks the capacity and ensures that it is at least the size specified.
*
* @param capacity  the capacity to ensure
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: minimizeCapacity
Description: /*** Minimizes the capacity to the actual length of the string.
*
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: size
Description: /*** Gets the length of the string builder.
* <p>
* This method is the same as {@link #length()} and is provided to match the
* API of Collections.
*
* @return the length
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: isEmpty
Description: /*** Checks is the string builder is empty (convenience Collections API style method).
* <p>
* This method is the same as checking {@link #length()} and is provided to match the
* API of Collections.
*
* @return <code>true</code> if the size is <code>0</code>.
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: clear
Description: /*** Clears the string builder (convenience Collections API style method).
* <p>
* This method does not reduce the size of the internal character buffer.
* To do that, call <code>clear()</code> followed by {@link #minimizeCapacity()}.
* <p>
* This method is the same as {@link #setLength(int)} called with zero
* and is provided to match the API of Collections.
*
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: charAt
Description: /*** Gets the character at the specified index.
*
* @see #setCharAt(int, char)
* @see #deleteCharAt(int)
* @param index  the index to retrieve, must be valid
* @return the character at the index
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: setCharAt
Description: /*** Sets the character at the specified index.
*
* @see #charAt(int)
* @see #deleteCharAt(int)
* @param index  the index to set
* @param ch  the new character
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: deleteCharAt
Description: /*** Deletes the character at the specified index.
*
* @see #charAt(int)
* @see #setCharAt(int, char)
* @param index  the index to delete
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: toCharArray
Description: /*** Copies the builder's character array into a new character array.
*
* @return a new array that represents the contents of the builder
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: toCharArray
Description: /*** Copies part of the builder's character array into a new character array.
*
* @param startIndex  the start index, inclusive, must be valid
* @param endIndex  the end index, exclusive, must be valid except that
*  if too large it is treated as end of string
* @return a new array that holds part of the contents of the builder
* @throws IndexOutOfBoundsException if startIndex is invalid,
*  or if endIndex is invalid (but endIndex greater than size is valid)
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: getChars
Description: /*** Copies the character array into the specified array.
*
* @param destination  the destination array, null will cause an array to be created
* @return the input array, unless that was null or too small
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: getChars
Description: /*** Copies the character array into the specified array.
*
* @param startIndex  first index to copy, inclusive, must be valid
* @param endIndex  last index, exclusive, must be valid
* @param destination  the destination array, must not be null or too small
* @param destinationIndex  the index to start copying in destination
* @throws NullPointerException if the array is null
* @throws IndexOutOfBoundsException if any index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendNewLine
Description: /*** Appends the new line string to this string builder.
* <p>
* The new line string can be altered using {@link #setNewLineText(String)}.
* This might be used to force the output to always use Unix line endings
* even when on Windows.
*
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendNull
Description: /*** Appends the text representing <code>null</code> to this string builder.
*
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends an object to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param obj  the object to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a CharSequence to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param seq  the CharSequence to append
* @return this, to enable chaining
* @since 3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends part of a CharSequence to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param seq  the CharSequence to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
* @since 3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a string to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends part of a string to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Calls {@link String#format(String, Object...)} and appends the result.
*
* @param format the format string
* @param objs the objects to use in the format string
* @return {@code this} to enable chaining
* @see String#format(String, Object...)
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a string buffer to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string buffer to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends part of a string buffer to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a StringBuilder to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str the StringBuilder to append
* @return this, to enable chaining
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends part of a StringBuilder to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str the StringBuilder to append
* @param startIndex the start index, inclusive, must be valid
* @param length the length to append, must be valid
* @return this, to enable chaining
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends another string builder to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string builder to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends part of a string builder to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a char array to the string builder.
* Appending null will call {@link #appendNull()}.
*
* @param chars  the char array to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a char array to the string builder.
* Appending null will call {@link #appendNull()}.
*
* @param chars  the char array to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a boolean value to the string builder.
*
* @param value  the value to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a char value to the string builder.
*
* @param ch  the value to append
* @return this, to enable chaining
* @since 3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends an int value to the string builder using <code>String.valueOf</code>.
*
* @param value  the value to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a long value to the string builder using <code>String.valueOf</code>.
*
* @param value  the value to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a float value to the string builder using <code>String.valueOf</code>.
*
* @param value  the value to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: append
Description: /*** Appends a double value to the string builder using <code>String.valueOf</code>.
*
* @param value  the value to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends an object followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param obj  the object to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a string followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends part of a string followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Calls {@link String#format(String, Object...)} and appends the result.
*
* @param format the format string
* @param objs the objects to use in the format string
* @return {@code this} to enable chaining
* @see String#format(String, Object...)
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a string buffer followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string buffer to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a string builder followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string builder to append
* @return this, to enable chaining
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends part of a string builder followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string builder to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
* @since 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends part of a string buffer followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends another string builder followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string builder to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends part of a string builder followed by a new line to this string builder.
* Appending null will call {@link #appendNull()}.
*
* @param str  the string to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a char array followed by a new line to the string builder.
* Appending null will call {@link #appendNull()}.
*
* @param chars  the char array to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a char array followed by a new line to the string builder.
* Appending null will call {@link #appendNull()}.
*
* @param chars  the char array to append
* @param startIndex  the start index, inclusive, must be valid
* @param length  the length to append, must be valid
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a boolean value followed by a new line to the string builder.
*
* @param value  the value to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a char value followed by a new line to the string builder.
*
* @param ch  the value to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends an int value followed by a new line to the string builder using <code>String.valueOf</code>.
*
* @param value  the value to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a long value followed by a new line to the string builder using <code>String.valueOf</code>.
*
* @param value  the value to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a float value followed by a new line to the string builder using <code>String.valueOf</code>.
*
* @param value  the value to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendln
Description: /*** Appends a double value followed by a new line to the string builder using <code>String.valueOf</code>.
*
* @param value  the value to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendAll
Description: /*** Appends each item in an array to the builder without any separators.
* Appending a null array will have no effect.
* Each object is appended using {@link #append(Object)}.
*
* @param <T>  the element type
* @param array  the array to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendAll
Description: /*** Appends each item in a iterable to the builder without any separators.
* Appending a null iterable will have no effect.
* Each object is appended using {@link #append(Object)}.
*
* @param iterable  the iterable to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendAll
Description: /*** Appends each item in an iterator to the builder without any separators.
* Appending a null iterator will have no effect.
* Each object is appended using {@link #append(Object)}.
*
* @param it  the iterator to append
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendWithSeparators
Description: /*** Appends an array placing separators between each value, but
* not before the first or after the last.
* Appending a null array will have no effect.
* Each object is appended using {@link #append(Object)}.
*
* @param array  the array to append
* @param separator  the separator to use, null means no separator
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendWithSeparators
Description: /*** Appends a iterable placing separators between each value, but
* not before the first or after the last.
* Appending a null iterable will have no effect.
* Each object is appended using {@link #append(Object)}.
*
* @param iterable  the iterable to append
* @param separator  the separator to use, null means no separator
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendWithSeparators
Description: /*** Appends an iterator placing separators between each value, but
* not before the first or after the last.
* Appending a null iterator will have no effect.
* Each object is appended using {@link #append(Object)}.
*
* @param it  the iterator to append
* @param separator  the separator to use, null means no separator
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendSeparator
Description: /*** Appends a separator if the builder is currently non-empty.
* Appending a null separator will have no effect.
* The separator is appended using {@link #append(String)}.
* <p>
* This method is useful for adding a separator each time around the
* loop except the first.
* <pre>
* for (Iterator it = list.iterator(); it.hasNext(); ) {
*   appendSeparator(,);
*   append(it.next());
* }
* </pre>
* Note that for this simple example, you should use
* {@link #appendWithSeparators(Iterable, String)}.
*
* @param separator  the separator to use, null means no separator
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendSeparator
Description: /*** Appends one of both separators to the StrBuilder.
* If the builder is currently empty it will append the defaultIfEmpty-separator
* Otherwise it will append the standard-separator
*
* Appending a null separator will have no effect.
* The separator is appended using {@link #append(String)}.
* <p>
* This method is for example useful for constructing queries
* <pre>
* StrBuilder whereClause = new StrBuilder();
* if(searchCommand.getPriority() != null) {
*  whereClause.appendSeparator( and,  where);
*  whereClause.append( priority = ?)
* }
* if(searchCommand.getComponent() != null) {
*  whereClause.appendSeparator( and,  where);
*  whereClause.append( component = ?)
* }
* selectClause.append(whereClause)
* </pre>
*
* @param standard the separator if builder is not empty, null means no separator
* @param defaultIfEmpty the separator if builder is empty, null means no separator
* @return this, to enable chaining
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendSeparator
Description: /*** Appends a separator if the builder is currently non-empty.
* The separator is appended using {@link #append(char)}.
* <p>
* This method is useful for adding a separator each time around the
* loop except the first.
* <pre>
* for (Iterator it = list.iterator(); it.hasNext(); ) {
*   appendSeparator(',');
*   append(it.next());
* }
* </pre>
* Note that for this simple example, you should use
* {@link #appendWithSeparators(Iterable, String)}.
*
* @param separator  the separator to use
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendSeparator
Description: /*** Append one of both separators to the builder
* If the builder is currently empty it will append the defaultIfEmpty-separator
* Otherwise it will append the standard-separator
*
* The separator is appended using {@link #append(char)}.
* @param standard the separator if builder is not empty
* @param defaultIfEmpty the separator if builder is empty
* @return this, to enable chaining
* @since 2.5
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendSeparator
Description: /*** Appends a separator to the builder if the loop index is greater than zero.
* Appending a null separator will have no effect.
* The separator is appended using {@link #append(String)}.
* <p>
* This method is useful for adding a separator each time around the
* loop except the first.
* <pre>
* for (int i = 0; i < list.size(); i++) {
*   appendSeparator(,, i);
*   append(list.get(i));
* }
* </pre>
* Note that for this simple example, you should use
* {@link #appendWithSeparators(Iterable, String)}.
*
* @param separator  the separator to use, null means no separator
* @param loopIndex  the loop index
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendSeparator
Description: /*** Appends a separator to the builder if the loop index is greater than zero.
* The separator is appended using {@link #append(char)}.
* <p>
* This method is useful for adding a separator each time around the
* loop except the first.
* <pre>
* for (int i = 0; i < list.size(); i++) {
*   appendSeparator(,, i);
*   append(list.get(i));
* }
* </pre>
* Note that for this simple example, you should use
* {@link #appendWithSeparators(Iterable, String)}.
*
* @param separator  the separator to use
* @param loopIndex  the loop index
* @return this, to enable chaining
* @since 2.3
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendPadding
Description: /*** Appends the pad character to the builder the specified number of times.
*
* @param length  the length to append, negative means no append
* @param padChar  the character to append
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendFixedWidthPadLeft
Description: /*** Appends an object to the builder padding on the left to a fixed width.
* The <code>toString</code> of the object is used.
* If the object is larger than the length, the left hand side is lost.
* If the object is null, the null text value is used.
*
* @param obj  the object to append, null uses null text
* @param width  the fixed field width, zero or negative has no effect
* @param padChar  the pad character to use
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendFixedWidthPadLeft
Description: /*** Appends an object to the builder padding on the left to a fixed width.
* The <code>String.valueOf</code> of the <code>int</code> value is used.
* If the formatted value is larger than the length, the left hand side is lost.
*
* @param value  the value to append
* @param width  the fixed field width, zero or negative has no effect
* @param padChar  the pad character to use
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendFixedWidthPadRight
Description: /*** Appends an object to the builder padding on the right to a fixed length.
* The <code>toString</code> of the object is used.
* If the object is larger than the length, the right hand side is lost.
* If the object is null, null text value is used.
*
* @param obj  the object to append, null uses null text
* @param width  the fixed field width, zero or negative has no effect
* @param padChar  the pad character to use
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: appendFixedWidthPadRight
Description: /*** Appends an object to the builder padding on the right to a fixed length.
* The <code>String.valueOf</code> of the <code>int</code> value is used.
* If the object is larger than the length, the right hand side is lost.
*
* @param value  the value to append
* @param width  the fixed field width, zero or negative has no effect
* @param padChar  the pad character to use
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the string representation of an object into this builder.
* Inserting null will use the stored null text value.
*
* @param index  the index to add at, must be valid
* @param obj  the object to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the string into this builder.
* Inserting null will use the stored null text value.
*
* @param index  the index to add at, must be valid
* @param str  the string to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the character array into this builder.
* Inserting null will use the stored null text value.
*
* @param index  the index to add at, must be valid
* @param chars  the char array to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts part of the character array into this builder.
* Inserting null will use the stored null text value.
*
* @param index  the index to add at, must be valid
* @param chars  the char array to insert
* @param offset  the offset into the character array to start at, must be valid
* @param length  the length of the character array part to copy, must be positive
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if any index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the value into this builder.
*
* @param index  the index to add at, must be valid
* @param value  the value to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the value into this builder.
*
* @param index  the index to add at, must be valid
* @param value  the value to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the value into this builder.
*
* @param index  the index to add at, must be valid
* @param value  the value to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the value into this builder.
*
* @param index  the index to add at, must be valid
* @param value  the value to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the value into this builder.
*
* @param index  the index to add at, must be valid
* @param value  the value to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: insert
Description: /*** Inserts the value into this builder.
*
* @param index  the index to add at, must be valid
* @param value  the value to insert
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: delete
Description: /*** Deletes the characters between the two specified indices.
*
* @param startIndex  the start index, inclusive, must be valid
* @param endIndex  the end index, exclusive, must be valid except
*  that if too large it is treated as end of string
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: deleteAll
Description: /*** Deletes the character wherever it occurs in the builder.
*
* @param ch  the character to delete
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: deleteFirst
Description: /*** Deletes the character wherever it occurs in the builder.
*
* @param ch  the character to delete
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: deleteAll
Description: /*** Deletes the string wherever it occurs in the builder.
*
* @param str  the string to delete, null causes no action
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: deleteFirst
Description: /*** Deletes the string wherever it occurs in the builder.
*
* @param str  the string to delete, null causes no action
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: deleteAll
Description: /*** Deletes all parts of the builder that the matcher matches.
* <p>
* Matchers can be used to perform advanced deletion behaviour.
* For example you could write a matcher to delete all occurrences
* where the character 'a' is followed by a number.
*
* @param matcher  the matcher to use to find the deletion, null causes no action
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: deleteFirst
Description: /*** Deletes the first match within the builder using the specified matcher.
* <p>
* Matchers can be used to perform advanced deletion behaviour.
* For example you could write a matcher to delete
* where the character 'a' is followed by a number.
*
* @param matcher  the matcher to use to find the deletion, null causes no action
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: replace
Description: /*** Replaces a portion of the string builder with another string.
* The length of the inserted string does not have to match the removed length.
*
* @param startIndex  the start index, inclusive, must be valid
* @param endIndex  the end index, exclusive, must be valid except
*  that if too large it is treated as end of string
* @param replaceStr  the string to replace with, null means delete range
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: replaceAll
Description: /*** Replaces the search character with the replace character
* throughout the builder.
*
* @param search  the search character
* @param replace  the replace character
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: replaceFirst
Description: /*** Replaces the first instance of the search character with the
* replace character in the builder.
*
* @param search  the search character
* @param replace  the replace character
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: replaceAll
Description: /*** Replaces the search string with the replace string throughout the builder.
*
* @param searchStr  the search string, null causes no action to occur
* @param replaceStr  the replace string, null is equivalent to an empty string
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: replaceFirst
Description: /*** Replaces the first instance of the search string with the replace string.
*
* @param searchStr  the search string, null causes no action to occur
* @param replaceStr  the replace string, null is equivalent to an empty string
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: replaceAll
Description: /*** Replaces all matches within the builder with the replace string.
* <p>
* Matchers can be used to perform advanced replace behaviour.
* For example you could write a matcher to replace all occurrences
* where the character 'a' is followed by a number.
*
* @param matcher  the matcher to use to find the deletion, null causes no action
* @param replaceStr  the replace string, null is equivalent to an empty string
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: replaceFirst
Description: /*** Replaces the first match within the builder with the replace string.
* <p>
* Matchers can be used to perform advanced replace behaviour.
* For example you could write a matcher to replace
* where the character 'a' is followed by a number.
*
* @param matcher  the matcher to use to find the deletion, null causes no action
* @param replaceStr  the replace string, null is equivalent to an empty string
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: replace
Description: /*** Advanced search and replaces within the builder using a matcher.
* <p>
* Matchers can be used to perform advanced behaviour.
* For example you could write a matcher to delete all occurrences
* where the character 'a' is followed by a number.
*
* @param matcher  the matcher to use to find the deletion, null causes no action
* @param replaceStr  the string to replace the match with, null is a delete
* @param startIndex  the start index, inclusive, must be valid
* @param endIndex  the end index, exclusive, must be valid except
*  that if too large it is treated as end of string
* @param replaceCount  the number of times to replace, -1 for replace all
* @return this, to enable chaining
* @throws IndexOutOfBoundsException if start index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: reverse
Description: /*** Reverses the string builder placing each character in the opposite index.
*
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: trim
Description: /*** Trims the builder by removing characters less than or equal to a space
* from the beginning and end.
*
* @return this, to enable chaining
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: startsWith
Description: /*** Checks whether this builder starts with the specified string.
* <p>
* Note that this method handles null input quietly, unlike String.
*
* @param str  the string to search for, null returns false
* @return true if the builder starts with the string
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: endsWith
Description: /*** Checks whether this builder ends with the specified string.
* <p>
* Note that this method handles null input quietly, unlike String.
*
* @param str  the string to search for, null returns false
* @return true if the builder ends with the string
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: subSequence
Description: /*** {@inheritDoc}
* @since 3.0
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: substring
Description: /*** Extracts a portion of this string builder as a string.
*
* @param start  the start index, inclusive, must be valid
* @return the new string
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: substring
Description: /*** Extracts a portion of this string builder as a string.
* <p>
* Note: This method treats an endIndex greater than the length of the
* builder as equal to the length of the builder, and continues
* without error, unlike StringBuffer or String.
*
* @param startIndex  the start index, inclusive, must be valid
* @param endIndex  the end index, exclusive, must be valid except
*  that if too large it is treated as end of string
* @return the new string
* @throws IndexOutOfBoundsException if the index is invalid
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: leftString
Description: /*** Extracts the leftmost characters from the string builder without
* throwing an exception.
* <p>
* This method extracts the left <code>length</code> characters from
* the builder. If this many characters are not available, the whole
* builder is returned. Thus the returned string may be shorter than the
* length requested.
*
* @param length  the number of characters to extract, negative returns empty string
* @return the new string
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: rightString
Description: /*** Extracts the rightmost characters from the string builder without
* throwing an exception.
* <p>
* This method extracts the right <code>length</code> characters from
* the builder. If this many characters are not available, the whole
* builder is returned. Thus the returned string may be shorter than the
* length requested.
*
* @param length  the number of characters to extract, negative returns empty string
* @return the new string
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: midString
Description: /*** Extracts some characters from the middle of the string builder without
* throwing an exception.
* <p>
* This method extracts <code>length</code> characters from the builder
* at the specified index.
* If the index is negative it is treated as zero.
* If the index is greater than the builder size, it is treated as the builder size.
* If the length is negative, the empty string is returned.
* If insufficient characters are available in the builder, as much as possible is returned.
* Thus the returned string may be shorter than the length requested.
*
* @param index  the index to start at, negative means zero
* @param length  the number of characters to extract, negative returns empty string
* @return the new string
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: contains
Description: /*** Checks if the string builder contains the specified char.
*
* @param ch  the character to find
* @return true if the builder contains the character
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: contains
Description: /*** Checks if the string builder contains the specified string.
*
* @param str  the string to find
* @return true if the builder contains the string
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: contains
Description: /*** Checks if the string builder contains a string matched using the
* specified matcher.
* <p>
* Matchers can be used to perform advanced searching behaviour.
* For example you could write a matcher to search for the character
* 'a' followed by a number.
*
* @param matcher  the matcher to use, null returns -1
* @return true if the matcher finds a match in the builder
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: indexOf
Description: /*** Searches the string builder to find the first reference to the specified char.
*
* @param ch  the character to find
* @return the first index of the character, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: indexOf
Description: /*** Searches the string builder to find the first reference to the specified char.
*
* @param ch  the character to find
* @param startIndex  the index to start at, invalid index rounded to edge
* @return the first index of the character, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: indexOf
Description: /*** Searches the string builder to find the first reference to the specified string.
* <p>
* Note that a null input string will return -1, whereas the JDK throws an exception.
*
* @param str  the string to find, null returns -1
* @return the first index of the string, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: indexOf
Description: /*** Searches the string builder to find the first reference to the specified
* string starting searching from the given index.
* <p>
* Note that a null input string will return -1, whereas the JDK throws an exception.
*
* @param str  the string to find, null returns -1
* @param startIndex  the index to start at, invalid index rounded to edge
* @return the first index of the string, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: indexOf
Description: /*** Searches the string builder using the matcher to find the first match.
* <p>
* Matchers can be used to perform advanced searching behaviour.
* For example you could write a matcher to find the character 'a'
* followed by a number.
*
* @param matcher  the matcher to use, null returns -1
* @return the first index matched, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: indexOf
Description: /*** Searches the string builder using the matcher to find the first
* match searching from the given index.
* <p>
* Matchers can be used to perform advanced searching behaviour.
* For example you could write a matcher to find the character 'a'
* followed by a number.
*
* @param matcher  the matcher to use, null returns -1
* @param startIndex  the index to start at, invalid index rounded to edge
* @return the first index matched, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: lastIndexOf
Description: /*** Searches the string builder to find the last reference to the specified char.
*
* @param ch  the character to find
* @return the last index of the character, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: lastIndexOf
Description: /*** Searches the string builder to find the last reference to the specified char.
*
* @param ch  the character to find
* @param startIndex  the index to start at, invalid index rounded to edge
* @return the last index of the character, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: lastIndexOf
Description: /*** Searches the string builder to find the last reference to the specified string.
* <p>
* Note that a null input string will return -1, whereas the JDK throws an exception.
*
* @param str  the string to find, null returns -1
* @return the last index of the string, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: lastIndexOf
Description: /*** Searches the string builder to find the last reference to the specified
* string starting searching from the given index.
* <p>
* Note that a null input string will return -1, whereas the JDK throws an exception.
*
* @param str  the string to find, null returns -1
* @param startIndex  the index to start at, invalid index rounded to edge
* @return the last index of the string, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: lastIndexOf
Description: /*** Searches the string builder using the matcher to find the last match.
* <p>
* Matchers can be used to perform advanced searching behaviour.
* For example you could write a matcher to find the character 'a'
* followed by a number.
*
* @param matcher  the matcher to use, null returns -1
* @return the last index matched, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: lastIndexOf
Description: /*** Searches the string builder using the matcher to find the last
* match searching from the given index.
* <p>
* Matchers can be used to perform advanced searching behaviour.
* For example you could write a matcher to find the character 'a'
* followed by a number.
*
* @param matcher  the matcher to use, null returns -1
* @param startIndex  the index to start at, invalid index rounded to edge
* @return the last index matched, or -1 if not found
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: asTokenizer
Description: /*** Creates a tokenizer that can tokenize the contents of this builder.
* <p>
* This method allows the contents of this builder to be tokenized.
* The tokenizer will be setup by default to tokenize on space, tab,
* newline and formfeed (as per StringTokenizer). These values can be
* changed on the tokenizer class, before retrieving the tokens.
* <p>
* The returned tokenizer is linked to this builder. You may intermix
* calls to the buider and tokenizer within certain limits, however
* there is no synchronization. Once the tokenizer has been used once,
* it must be {@link StrTokenizer#reset() reset} to pickup the latest
* changes in the builder. For example:
* <pre>
* StrBuilder b = new StrBuilder();
* b.append(a b );
* StrTokenizer t = b.asTokenizer();
* String[] tokens1 = t.getTokenArray();  // returns a,b
* b.append(c d );
* String[] tokens2 = t.getTokenArray();  // returns a,b (c and d ignored)
* t.reset();              // reset causes builder changes to be picked up
* String[] tokens3 = t.getTokenArray();  // returns a,b,c,d
* </pre>
* In addition to simply intermixing appends and tokenization, you can also
* call the set methods on the tokenizer to alter how it tokenizes. Just
* remember to call reset when you want to pickup builder changes.
* <p>
* Calling {@link StrTokenizer#reset(String)} or {@link StrTokenizer#reset(char[])}
* with a non-null value will break the link with the builder.
*
* @return a tokenizer that is linked to this builder
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: asReader
Description: /*** Gets the contents of this builder as a Reader.
* <p>
* This method allows the contents of the builder to be read
* using any standard method that expects a Reader.
* <p>
* To use, simply create a <code>StrBuilder</code>, populate it with
* data, call <code>asReader</code>, and then read away.
* <p>
* The internal character array is shared between the builder and the reader.
* This allows you to append to the builder after creating the reader,
* and the changes will be picked up.
* Note however, that no synchronization occurs, so you must perform
* all operations with the builder and the reader in one thread.
* <p>
* The returned reader supports marking, and ignores the flush method.
*
* @return a reader that reads from this builder
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: asWriter
Description: /*** Gets this builder as a Writer that can be written to.
* <p>
* This method allows you to populate the contents of the builder
* using any standard method that takes a Writer.
* <p>
* To use, simply create a <code>StrBuilder</code>,
* call <code>asWriter</code>, and populate away. The data is available
* at any time using the methods of the <code>StrBuilder</code>.
* <p>
* The internal character array is shared between the builder and the writer.
* This allows you to intermix calls that append to the builder and
* write using the writer and the changes will be occur correctly.
* Note however, that no synchronization occurs, so you must perform
* all operations with the builder and the writer in one thread.
* <p>
* The returned writer ignores the close and flush methods.
*
* @return a writer that populates this builder
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: equalsIgnoreCase
Description: /*** Checks the contents of this builder against another to see if they
* contain the same character content ignoring case.
*
* @param other  the object to check, null returns false
* @return true if the builders contain the same characters in the same order
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: equals
Description: /*** Checks the contents of this builder against another to see if they
* contain the same character content.
*
* @param other  the object to check, null returns false
* @return true if the builders contain the same characters in the same order
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: equals
Description: /*** Checks the contents of this builder against another to see if they
* contain the same character content.
*
* @param obj  the object to check, null returns false
* @return true if the builders contain the same characters in the same order
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: hashCode
Description: /*** Gets a suitable hash code for this builder.
*
* @return a hash code
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: toString
Description: /*** Gets a String version of the string builder, creating a new instance
* each time the method is called.
* <p>
* Note that unlike StringBuffer, the string version returned is
* independent of the string builder.
*
* @return the builder as a String
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: toStringBuffer
Description: /*** Gets a StringBuffer version of the string builder, creating a
* new instance each time the method is called.
*
* @return the builder as a StringBuffer
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: toStringBuilder
Description: /*** Gets a StringBuilder version of the string builder, creating a
* new instance each time the method is called.
*
* @return the builder as a StringBuilder
* @since Apache Commons Lang 3.2
*/"

"Write a JUnit test method for the Java method described below. The test method should have proper and relevant assert statements and avoid repetition of assert statements.
@Test public void testName() { /*assertEquals(expectedResult, actualResult); assertTrue(someCondition); assertFalse(someCondition); */}
Class: StrBuilder, Method: build
Description: /*** Implement the {@link Builder} interface.
* @return the builder as a String
* @since Apache Commons Lang 3.2
* @see #toString()
*/"

